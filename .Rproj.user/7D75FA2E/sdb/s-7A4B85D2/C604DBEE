{
    "collab_server" : "",
    "contents" : "\n\n# Objetivo\n#'        - Criar graficos e tabelas para a exibicao dos indicadores.\n\n\n\n# 1. Server ---------------------------------------------------------------\n\n\nserver <- function(input, output,session){\n \n# 1.1. Sobre --------------------------------------------------------------\n     \n ## Funcao para descricao do sobre\n  \n  output$sobre <- renderUI({\n    note <- paste0(\"\n                   <h2 align = 'center'>\n                   <font size ='6' color = 'black'><strong>\n                   \n                   Sobre </font></h2>\n                   \n                   <font size = '1' color = 'black'>\n\n\n                   <h4 align = 'justify'><br />\n                   Os indicadores eleitorais são uma iniciativa de disseminar análise de dados eleitorais. \n                   Os indicadores aqui calculados foram inspirados pelo livro 'Votos e Partidos - Almanaque \n                   de Dados Eleitorais' de Wanderley Guilherme dos Santos. Todos os indicadores foram calculados \n                   a partir dos dados do <a href='http://www.cepesp.io/cepesp-data/'> CepespData </a>. Desenvolvido \n                   por Rebeca Carvalho, Gabriela Campos e apoio da <a href='http://cepespdata.io/sobre'> \n                   equipe CEPESP</a>. </h4></font>\")\n    HTML(note)\n  })\n  \n# 1.2. Agregacao regional -------------------------------------------------  \n  \n## Funcao que retorna uma nova caixa de selecao quando o usuario seleciona \"UF\" na agregacao regional    \n  \n### Fragmentacao partidaria\n  \n  carg <- reactive({\n    cargo <- input$DESCRICAO_CARGO2\n    if(cargo == \"Deputado Federal\"){\n      return(input$AGREGACAO_REGIONAL2)\n    } \n  })\n  \n  \n  output$AGREGACAO_REGIONAL2 <- renderUI({\n    cargo <- input$DESCRICAO_CARGO2\n    if(cargo == \"Deputado Federal\"){\n      selectizeInput(\"AGREGACAO_REGIONAL2\",\n                     label = NULL,\n                     choices = \n                       c(\"Brasil\"),\n                     selected = NULL,\n                     options = list(placeholder = 'Escolha uma agregação regional'))\n    }else if(cargo == \"Deputado Estadual\"){\n      selectizeInput(\"AGREGACAO_REGIONAL2\",\n                     label = NULL,\n                     choices = \n                       c(\"UF\"),\n                     selected = NULL,\n                     options = list(placeholder = 'Escolha uma agregação regional'))\n      \n    } else{\n      return()\n    }\n  })\n  \n  \n  \n  agreg <- reactive({\n    agregacao <- input$AGREGACAO_REGIONAL2\n    if(agregacao == \"UF\"){\n      return(input$UF2)\n    } \n  })\n \n  \n  output$UF2 <- renderUI({\n    agregacao <- input$AGREGACAO_REGIONAL2\n    cargo <- input$DESCRICAO_CARGO2\n    if(cargo == \"Deputado Estadual\" & \n       length(agregacao == \"UF\") > 0){\n      selectizeInput(\"UF2\",\n                     label = NULL,\n                     choices = \n                       c(\"\",\"Todas UFs\", \"AC\", \"AL\", \"AM\", \"AP\", \"BA\",\n                         \"CE\", \"DF\", \"ES\",\"GO\", \"MA\", \"MG\",\n                         \"MS\", \"MT\", \"PA\", \"PB\", \"PE\", \"PI\",\n                         \"PR\", \"RJ\", \"RN\", \"RO\", \"RR\",\"RS\", \n                         \"SC\", \"SE\", \"SP\", \"TO\"),\n                     selected = NULL,\n                     options = list(placeholder = 'Escolha uma UF'))\n    }\n  })\n  \n  \n### Renovacao parlamentar\n  \n  \n  carg <- reactive({\n    cargo <- input$DESCRICAO_CARGO3\n    if(cargo == \"Deputado Federal\"){\n      return(input$AGREGACAO_REGIONAL2)\n    } \n  })\n  \n  \n  output$AGREGACAO_REGIONAL3 <- renderUI({\n    cargo <- input$DESCRICAO_CARGO3\n    if(cargo == \"Deputado Federal\"){\n      selectizeInput(\"AGREGACAO_REGIONAL3\",\n                     label = NULL,\n                     choices = \n                       c(\"\", \"Brasil\"),\n                     selected = NULL,\n                     options = list(placeholder = 'Escolha uma agregação regional'))\n    } else if(cargo == \"Deputado Estadual\"){\n      selectizeInput(\"AGREGACAO_REGIONAL3\",\n                     label = NULL,\n                     choices = \n                       c(\"\", \"UF\"),\n                     selected = NULL,\n                     options = list(placeholder = 'Escolha uma agregação regional'))\n      \n    }\n  })\n  \n  \n  \n   agreg <- reactive({\n    agregacao <- input$AGREGACAO_REGIONAL3\n    if(agregacao == \"UF\"){\n      return(input$UF3)\n    } \n  })\n  \n  \n  output$UF3 <- renderUI({\n    agregacao <- input$AGREGACAO_REGIONAL3\n    cargo <- input$DESCRICAO_CARGO3\n    if(cargo == \"Deputado Estadual\" &\n      length(agregacao == \"UF\") > 0){\n      selectizeInput(\"UF3\",\n                     label = NULL,\n                     choices = \n                       c(\"\",\"Todas UFs\",\"AC\", \"AL\", \"AM\", \n                         \"AP\", \"BA\", \"CE\", \"DF\", \"ES\",\"GO\",\n                         \"MA\", \"MG\",\"MS\", \"MT\", \"PA\", \"PB\", \n                         \"PE\", \"PI\",\"PR\", \"RJ\", \"RN\", \"RO\", \n                         \"RR\",\"RS\", \"SC\", \"SE\", \"SP\", \"TO\"),\n                     selected = NULL,\n                     options = list(placeholder = 'Escolha uma UF'))\n    }\n  })\n  \n  \n  ## Alienacao\n  \n  agreg <- reactive({\n    agregacao <- input$AGREGACAO_REGIONAL4\n    if(agregacao == \"UF\"){\n      return(input$UF4)\n    } \n  })\n  \n  \n  output$UF4 <- renderUI({\n    agregacao <- input$AGREGACAO_REGIONAL4\n    if(agregacao == \"UF\"){\n      selectizeInput(\"UF4\",\n                     label = NULL,\n                     choices = \n                       c(\"\",\"Todas UFs\",\"AC\", \"AL\", \"AM\", \n                         \"AP\", \"BA\", \"CE\", \"DF\", \"ES\",\"GO\",\n                         \"MA\", \"MG\",\"MS\", \"MT\", \"PA\", \"PB\", \n                         \"PE\", \"PI\",\"PR\", \"RJ\", \"RN\", \"RO\", \n                         \"RR\",\"RS\", \"SC\", \"SE\", \"SP\", \"TO\"),\n                     selected = NULL,\n                     options = list(placeholder = 'Escolha uma UF'))\n    }\n  })\n  \n  \n  \n# 2. Indicadores ------------------------------------------------------------\n  \n  ## Definicao das atribuicoes das tabela dos indicadores e seus respectivos botoes de acao\n  ## Definicao de cada indicador\n  \n# 2.1. Distribuicao de cadeiras -------------------------------------------  \n \n  ## Funcao para descricao dos indicadores de distribuicao de cadeiras\n  \n  output$def_distc <- renderUI({\n    note <- paste0(\"<h3 align = 'center'>\n                   <font color = 'black'>\n                   Definição dos indicadores </h3>\n                   <h4><br />Quociente Eleitoral</h4>\n                   <h5 align = 'justify'><br />\n                   É o número mínimo de votos que um partido ou coligação deve atingir \n                   em determinada UF e eleição para garantir uma vaga.</h5>\n                   <p>\n                   <strong>Fórmula: </strong>\n                   <p>\n                   QE = (Votos válidos)/(Número de vagas existentes)\n                   <p>\n                   <strong>Fonte:</strong><a href='http://www.tse.jus.br/eleitor/glossario/termos/quociente-eleitoral'>\n                   Tribunal Superior Eleitoral - TSE </a></p>\n                   <p><br />\n                   <h4>Quociente Partidário</h4>\n                   <h5 align = 'justify'><br />\n                   O indicador representa o número de vagas que o partido ou coligação obteve, \n                   excluindo as vagas distribuídas por média.</h5>\n                   <p>\n                   <strong>Fórmula: </strong>\n                   <p>\n                   QP = Número de votos válidos do partido ou coligação/Quociente eleitoral\n                   <p>\n                   <strong>Fonte:</strong><a href='http://www.tse.jus.br/eleitor/glossario/termos/quociente-partidario'>\n                   Tribunal Superior Eleitoral - TSE </a></p></font>\")\n    HTML(note)\n  }) \n  \n \n# 2.1.1. Quociente eleitoral -----------------------------------------------\n  \n## Tabela para visualizacao\n\n\n### Deputado Federal\n  \n  depfed <- reactive({ ## Atributos da tabela\n    indicador <- input$INDICADORES_DISTR\n    cargo <- input$DESCRICAO_CARGO1\n    uf <- input$UF\n    if(indicador == \"Quociente eleitoral\" & \n       cargo == \"Deputado Federal\"){\n      return(input$quoce_fed)\n    }\n  })\n  \n  output$quoce_fed <- DT::renderDataTable(server = FALSE,{ ## Tabela que devera ser chamada na ui\n    bquoce_fed()\n  })\n  \n  ?renderDataTable\n  \n  bquoce_fed <- eventReactive(input$BCALC1, { ## Botao de acao\n    datatable(options = list(\n                autoWidth = TRUE,\n                ordering = TRUE, \n                searching = TRUE,\n                lengthChange = FALSE,\n                lengthMenu = FALSE,\n                columnDefs = list(list(\n                  className = 'dt-right', targets = '_all')),\n                dom = 'Bfrtip',\n                buttons = list('copy', 'print', list(\n                  extend = 'csv',\n                  title = 'quoc_elei_dep_fed',\n                  bom = TRUE))),\n              class = \"display\",\n              extensions = 'Buttons',{\n      indicador <- input$INDICADORES_DISTR\n      cargo <- input$DESCRICAO_CARGO1\n      uf <- input$UF\n      if(indicador == \"Quociente eleitoral\" & \n         cargo == \"Deputado Federal\"){\n        if(input$UF == \"Todas UFs\"){\n          distcad_fed %>% \n            select(`Ano da eleição`, \n                   UF,\n                   `Quociente eleitoral`) %>% \n            unique() %>% \n            spread(`Ano da eleição`, \n                   `Quociente eleitoral`)\n        }else{\n          distcad_fed %>% \n            dplyr::filter(UF == input$UF) %>% \n            select(`Ano da eleição`, \n                   UF, \n                   `Quociente eleitoral`) %>% \n            unique() %>% \n            spread(`Ano da eleição`,\n                   `Quociente eleitoral`)}\n        \n      }\n    })\n  })  \n  \n## Dados agregados\n  \n### Deputado Federal  \n  \n  ag_quocefed <- reactive({\n    indicador <- input$INDICADORES_DISTR\n    cargo <- input$DESCRICAO_CARGO1\n    uf <- input$UF\n    if(indicador == \"Quociente eleitoral\" &\n       cargo == \"Deputado Federal\"){\n      return(input$agreg_quocefed) \n    }\n  })\n  \n  output$agreg_quocefed<- DT::renderDataTable(server = FALSE,{\n    bagreg_quocefed()\n  })\n  \n  bagreg_quocefed <- eventReactive(input$BCALC1, {\n    datatable(options = list(\n                autoWidth = TRUE,\n                ordering = TRUE, \n                searching = TRUE,\n                lengthChange = FALSE,\n                lengthMenu = FALSE,\n                columnDefs = list(list(\n                  className = 'dt-right', targets = '_all')),\n                dom = 'Bfrtip',\n                buttons = list('copy', 'print',\n                               list(\n                  extend = 'csv',\n                  exportOptions = list(\n                    columns = ':visible'),\n                  title = 'quoc_elei_dep_fed_agreg',\n                  bom = TRUE),\n                  I('colvis'))), \n              class = \"display\",\n              extensions = 'Buttons',{\n      indicador <- input$INDICADORES_DISTR\n      cargo <- input$DESCRICAO_CARGO1\n      uf <- input$UF\n      if(indicador == \"Quociente eleitoral\" &\n         cargo == \"Deputado Federal\"){\n        if(input$UF == \"Todas UFs\"){\n          data = distcad_fed %>% \n            unique()\n        }\n        else{\n          data = distcad_fed %>% \n            dplyr::filter(UF == input$UF) %>% \n              unique()\n        }}\n    })\n  })  \n  \n\n## Tabela para visualizacao  \n    \n### Deputado Estadual\n  \n  depest <- reactive({ ## Atributos da tabela\n    indicador <- input$INDICADORES_DISTR\n    cargo <- input$DESCRICAO_CARGO1\n    if(indicador == \"Quociente eleitoral\" & \n       cargo == \"Deputado Estadual\"){\n      return(input$quoce_est)\n    }\n  })\n  \n  output$quoce_est <- DT::renderDataTable(server = FALSE,{ ## Tabela que devera ser chamada na ui\n    bquoce_est()\n  })\n  \n  \n  bquoce_est <- eventReactive(input$BCALC1, { ## Botao de acao\n    datatable(options = list(\n                autoWidth = TRUE,\n                ordering = TRUE, \n                searching = TRUE,\n                lengthChange = FALSE,\n                lengthMenu = FALSE,\n                columnDefs = list(list(\n                  className = 'dt-right', targets = '_all')),\n                dom = 'Bfrtip',\n                buttons = list('copy', 'print', list(\n                  extend = 'csv',\n                  title = 'quoc_elei_dep_est',\n                  bom = TRUE))), \n              class = \"display\",\n              extensions = 'Buttons',{\n      indicador <- input$INDICADORES_DISTR\n      cargo <- input$DESCRICAO_CARGO1\n      uf <- input$UF\n      if(indicador == \"Quociente eleitoral\" & \n         cargo == \"Deputado Estadual\"){\n        if(input$UF==\"Todas UFs\"){\n          expr = distcad_est %>% \n            select(`Ano da eleição`, \n                   UF,\n                   `Quociente eleitoral`) %>% \n            unique %>% \n            spread(`Ano da eleição`,\n                   `Quociente eleitoral`)\n          \n        }else{\n          expr = distcad_est %>% \n            dplyr::filter(UF == input$UF) %>% \n            select(`Ano da eleição`, \n                   UF, \n                   `Quociente eleitoral`) %>% \n            unique %>% \n            spread(`Ano da eleição`, \n                   `Quociente eleitoral`)}\n      }\n    })\n  }) \n  \n## Dados agregados\n  \n## Deputado Estadual  \n  \n  ag_est <- reactive({\n    indicador <- input$INDICADORES_DISTR\n    cargo <- input$DESCRICAO_CARGO1\n    if(indicador == \"Quociente eleitoral\" & \n       cargo == \"Deputado Estadual\"){\n      return(input$agreg_quoceest) \n    }\n  })\n  \n  output$agreg_quoceest <- DT::renderDataTable(server = FALSE,{\n    bagreg_quoceest()\n  })\n  \n  bagreg_quoceest <- eventReactive(input$BCALC1, {\n    datatable(options = list(\n                autoWidth = TRUE,\n                ordering = TRUE, \n                searching = TRUE,\n                lengthChange = FALSE,\n                lengthMenu = FALSE,\n                columnDefs = list(list(\n                  className = 'dt-right', targets = '_all')),\n                dom = 'Bfrtip',\n                buttons = list('copy', 'print', \n                               list(\n                  extend = 'csv',\n                  exportOptions = list(\n                    columns = ':visible'),\n                  title = 'quoc_elei_dep_est_agreg',\n                  bom = TRUE),\n                  I('colvis'))), \n              class = \"display\",\n              extensions = 'Buttons',{\n      indicador <- input$INDICADORES_DISTR\n      cargo <- input$DESCRICAO_CARGO1\n      uf <- input$UF\n      if(indicador == \"Quociente eleitoral\" & \n         cargo == \"Deputado Estadual\"){\n        if(input$UF == \"Todas UFs\"){\n          expr = distcad_est %>% \n           unique()\n        } else {\n          expr = distcad_est %>% \n            dplyr::filter(UF == input$UF) %>% \n            unique()\n          \n        }}\n    })\n  })  \n  \n# 2.1.2. Quociente partidario ---------------------------------------------\n\n## Tabela para visualizacao    \n  \n### Deputado Federal\n  \n  depfedp <- reactive({ ## Atributos da tabela\n    indicador <- input$INDICADORES_DISTR\n    cargo <- input$DESCRICAO_CARGO1\n    if(indicador == \"Quociente partidário\" & \n       cargo == \"Deputado Federal\"){\n      return(input$quocp_fed)\n    }\n  })\n  \n  output$quocp_fed <- DT::renderDataTable(server = FALSE,{ ## Tabela que devera ser chamada na ui\n    bquocp_fed()\n  })\n  \n  bquocp_fed <- eventReactive(input$BCALC1, { ## Botao de acao\n    datatable(options = list(\n                autoWidth = TRUE,\n                ordering = TRUE, \n                searching = TRUE,\n                lengthChange = FALSE,\n                lengthMenu = FALSE,\n                columnDefs = list(list(\n                  className = 'dt-right', targets = '_all')),\n                dom = 'Bfrtip',\n                buttons = list('copy', 'print', list(\n                  extend = 'csv',\n                  title = 'quoc_part_dep_fed',\n                  bom = TRUE))), \n              class = \"display\",\n              extensions = 'Buttons',{\n      indicador <- input$INDICADORES_DISTR\n      cargo <- input$DESCRICAO_CARGO1\n      uf <- input$UF\n      if(indicador == \"Quociente partidário\" & \n         cargo == \"Deputado Federal\"){\n        if(input$UF==\"Todas UFs\"){\n          expr = distcad_fed %>% \n            select(`Ano da eleição`, \n                   UF, \n                   `Sigla do partido`, \n                   `Quociente partidário`)\n          \n        }else{\n          expr = distcad_fed %>% \n            dplyr::filter(UF == input$UF) %>% \n            select(`Ano da eleição`, \n                   UF, \n                   `Sigla do partido`, \n                   `Quociente partidário`)\n        }\n        \n      }\n    })\n  })\n  \n## Dados agregados\n  \n# Deputado Federal\n  \n  ag_quocpfed <- reactive({\n    indicador <- input$INDICADORES_DISTR\n    cargo <- input$DESCRICAO_CARGO1\n    if(indicador == \"Quociente partidário\" & \n       cargo == \"Deputado Federal\"){\n      return(input$agreg_quocpfed)\n    }\n  })\n  \n  output$agreg_quocpfed <- DT::renderDataTable(server = FALSE,{\n    bagreg_quocpfed()\n  })\n  \n  bagreg_quocpfed <- eventReactive(input$BCALC1, {\n    datatable(options = list(\n                autoWidth = TRUE,\n                ordering = TRUE, \n                searching = TRUE,\n                lengthChange = FALSE,\n                lengthMenu = FALSE,\n                columnDefs = list(list(\n                  className = 'dt-right', targets = '_all')),\n                dom = 'Bfrtip',\n                buttons = list('copy', 'print', \n                               list(\n                  extend = 'csv',\n                  exportOptions = list(\n                    columns = ':visible'),\n                  title = 'quoc_part_dep_fed_agreg',\n                  bom = TRUE),\n                  I('colvis'))), \n              class = \"display\",\n              extensions = 'Buttons',{\n      indicador <- input$INDICADORES_DISTR\n      cargo <- input$DESCRICAO_CARGO1\n      uf <- input$UF\n      if(indicador == \"Quociente partidário\" & \n         cargo == \"Deputado Federal\"){\n        if(input$UF == \"Todas UFs\"){\n          expr = distcad_fed %>% \n            unique()\n          \n        }else{\n          expr = distcad_fed %>% \n            dplyr::filter(UF == input$UF) %>% \n            unique()}\n      }\n    })\n  })\n  \n## Tabela para visualizacao  \n  \n### Deputado estadual\n  \n  depestp <- reactive({ ## Atributos da tabela\n    indicador <- input$INDICADORES_DISTR\n    cargo <- input$DESCRICAO_CARGO1\n    if(indicador == \"Quociente partidário\" & \n       cargo == \"Deputado Estadual\"){\n      return(input$quocp_est)\n    }\n  })\n  \n  output$quocp_est <- DT::renderDataTable(server = FALSE,{ ## Tabela que devera ser chamada na ui\n    bquocp_est()\n  })\n  \n  bquocp_est <- eventReactive(input$BCALC1, { ## Botao de acao\n    datatable(options = list(\n                autoWidth = TRUE,\n                ordering = TRUE, \n                searching = TRUE,\n                lengthChange = FALSE,\n                lengthMenu = FALSE,\n                columnDefs = list(list(\n                  className = 'dt-right', targets = '_all')),\n                dom = 'Bfrtip',\n                buttons = list('copy', 'print', list(\n                  extend = 'csv',\n                  title = 'quoc_part_dep_est',\n                  bom = TRUE))), \n              class = \"display\",\n              extensions = 'Buttons',{\n      indicador <- input$INDICADORES_DISTR\n      cargo <- input$DESCRICAO_CARGO1\n      uf <- input$UF\n      if(indicador == \"Quociente partidário\" & \n         cargo == \"Deputado Estadual\"){\n        if(input$UF==\"Todas UFs\"){\n          expr = distcad_est %>% \n            select(`Ano da eleição`, \n                   UF,\n                   `Sigla do partido`,\n                   `Quociente partidário`)\n          \n        }else{\n          expr = distcad_est %>% \n            dplyr::filter(UF == input$UF) %>% \n            select(`Ano da eleição`, \n                   UF,\n                   `Sigla do partido`, \n                   `Quociente partidário`)\n        }}\n    })\n  })\n \n## Dados agregados\n  \n### Deputado Estadual  \n  \n  ag_qupcpest <- reactive({\n    indicador <- input$INDICADORES_DISTR\n    cargo <- input$DESCRICAO_CARGO1\n    if(indicador == \"Quociente partidário\" & \n       cargo == \"Deputado Estadual\"){\n      return(input$agreg_quocpest)\n    }\n  })\n  \n  output$agreg_quocpest <- DT::renderDataTable(server = FALSE,{\n    bagreg_quocpest()\n  })\n  \n  bagreg_quocpest <- eventReactive(input$BCALC1,{\n    datatable(options = list(\n                autoWidth = TRUE,\n                ordering = TRUE, \n                searching = TRUE,\n                lengthChange = FALSE,\n                lengthMenu = FALSE,\n                columnDefs = list(list(\n                  className = 'dt-right', targets = '_all')),\n                dom = 'Bfrtip',\n                buttons = list('copy', 'print', \n                               list(\n                  extend = 'csv',\n                  exportOptions = list(\n                    columns = ':visible'),\n                  title = 'quoc_part_dep_est_agreg',\n                  bom = TRUE),\n                  I('colvis'))), \n              class = \"display\",\n              extensions = 'Buttons',{\n      indicador <- input$INDICADORES_DISTR\n      cargo <- input$DESCRICAO_CARGO1\n      uf <- input$UF\n      if(indicador == \"Quociente partidário\" & \n         cargo == \"Deputado Estadual\"){\n        if(input$UF == \"Todas UFs\"){\n          expr = distcad_est %>% \n            unique()\n        }else{          \n          expr = distcad_est %>% \n            dplyr::filter(UF == input$UF) %>% \n            unique()}\n      }\n    })\n  })\n\n# 2.2. Fragmentacao partidaria --------------------------------------------    \n \n  ## Funcao para descricao dos indicadores de fragmentacao partidaria\n  \n  output$def_frag <- renderUI({\n    note <- paste0(\"\n                   <h3 align = 'center'>\n                   <font color = 'black'>\n                   Definição dos indicadores de fragmentação partidária</h3>\n                   <h4><br />Desproporcionalidade de gallagher </h4>\n                   <h5 align = 'justify'><br />\n                   O índice Gallagher consiste na diferença dos percentuais de votos e de cadeiras obtidas por cada partido.</h5>\n                   <p>\n                   <strong>Fórmula: </strong>\n                   <p>\n                   DG = &radic;&sum;(vi - si)<sup>2</sup>/2,\n                   <p>onde vi = percentual de votos e si = percentual de cadeiras.</p>\n                   <p><br />      \n                   <h4>Fracionalização </h4>\n                   <h5 align = 'justify'><br />\n                   Este indicador tem por objetivo medir a dispersão partidária de um parlamento. \n                   Ele indica qual a probabilidade de dois parlamentares desse parlamento, \n                   tomados ao acaso, pertecerem a partidos diferentes.</h5>\n                   <p>\n                   <strong>Fórmula: </strong>\n                   <p>\n                   FC = 1 - &sum;(pe<sup>2</sup>), \n                   <p>onde pe = percentual de cadeiras ocupadas por partido.</p>\n                   <p><br />                 \n                   <h4>Fracionalização máxima</h4>\n                   <h5 align = 'justify'><br />\n                   A 'fracionalização máxima' não depende da votação dos partidos, mas da quantidade \n                   de cadeiras e partidos com representação parlamentar.</h5>\n                   <p>\n                   <strong>Fórmula: </strong>\n                   <p>\n                   FM = N*(n-1)/n*(N-1), \n                   <p> onde N = número de cadeiras e n = número de partidos com representação parlamentar.</p>\n                   <p><br />      \n                   <h4>Fragmentação</h4>\n                   <h5 align = 'justify'><br />\n                   A fragmentação mede quanto o índice de fracionalização se aproxima da fracionalização\n                   máxima.</h5>\n                   <p>\n                   <strong>Fórmula: </strong>\n                   <p>\n                   FG = (Índice de fracionalização)/(Índice de fracionalização máxima)\n                   <p><br />                  \n                   <h4>Número efetivo de partidos</h4>\n                   <h5 align = 'justify'><br />\n                   O conceito de número efetivo de partidos define o grau de fragmentação do sistema partidário, \n                   através da ponderação da força relativa das legendas que compõem o parlamento. O valor calculado \n                   aponta a quantidade de partidos com alguma relevância em um dado sistema político. O NEP é \n                   calculado dividindo-se 1 pelo somatório do quadrado das proporções de <b>votos</b> ou de \n                   <b>cadeiras</b> obtidos pelos partidos em uma dada eleição.</h5>\n                   <p>\n                   <strong>Fórmula: </strong>\n                   <p>\n                   NEP = 1/ &sum;(pe<sup>2</sup>),\n                   <p>onde pe = proporção de votos ou cadeiras obtidos pelos partidos.</p>\n                   <p><br />\n                   <strong>Fonte:</strong> \n                   <p>1. Votos e partidos: almanaque de dados eleitorais: Brasil e outros \n                   países/ Organização de Wanderley Guilherme dos Santos, com a colaboração de Fabrícia Guimarães. -\n                   Rio de Janeiro: Editora FGV, 2002); \n                   <p>2. <a href='http://datapolitica.com.br/eleicao/metodologia.html'>Data Politica</a></p></font>\")\n    HTML(note)\n  }) \n  \n# 2.2.1. Desproporcionalidade de gallagher --------------------------------  \n  \n  ## Tabela para visualizacao    \n  \n  ### Deputado Federal\n  \n  \n  depfedg <- reactive({ ## Atributos da tabela\n    indicador <- input$INDICADORES_FRAG\n    agregacao <- input$AGREGACAO_REGIONAL2\n    if(indicador == \"Desproporcionalidade de gallagher\" & \n      agregacao == \"Brasil\"){\n      return(input$dpg_fed)\n    }\n  })\n  \n  output$dpg_fed <- DT::renderDataTable(server = FALSE,{ ## Tabela que devera ser chamada na ui\n    bdpg_fed()\n  })\n  \n  bdpg_fed <- eventReactive(input$BCALC2, { ## Botao de acao\n    datatable(options = list(\n      autoWidth = TRUE,\n      ordering = TRUE, \n      searching = TRUE,\n      lengthChange = FALSE,\n      lengthMenu = FALSE,\n      columnDefs = list(list(\n        className = 'dt-right', targets = '_all')),\n      dom = 'Bfrtip',\n      buttons = list('copy', 'print', list(\n        extend = 'csv',\n        title = 'fracio_fed',\n        bom = TRUE))), \n      class = \"display\",\n      extensions = 'Buttons',{\n        indicador <- input$INDICADORES_FRAG\n        agregacao <- input$AGREGACAO_REGIONAL2\n        if(indicador == \"Desproporcionalidade de gallagher\" & \n            agregacao == \"Brasil\"){\n          frag_part_fed %>% \n            ungroup() %>% \n            dplyr::filter(Cargo == input$DESCRICAO_CARGO2) %>% \n            dplyr::select(`Ano da eleição`,\n                          `Desproporcionalidade de gallagher`) %>% \n            unique() %>% \n            spread(`Ano da eleição`,\n                   `Desproporcionalidade de gallagher`)\n          \n          \n        }\n      })\n  })  \n  \n  ## Dados agregados\n  \n  ### Deputado Federal  \n  \n  ag_dpgfed <- reactive({\n    indicador <- input$INDICADORES_FRAG\n    agregacao <- input$AGREGACAO_REGIONAL2\n    if(indicador == \"Desproporcionalidade de gallagher\" & \n       agregacao == \"Brasil\"){\n      return(input$agreg_dpgfed)\n    }\n  })\n  \n  output$agreg_dpgfed <- DT::renderDataTable(server = FALSE,{\n    bagreg_dpgfed()\n  })\n  \n  bagreg_dpgfed <- eventReactive(input$BCALC2, {\n    datatable(options = list(\n      scrollX = TRUE,\n      autoWidth = TRUE,\n      ordering = TRUE, \n      searching = TRUE,\n      lengthChange = FALSE,\n      lengthMenu = FALSE,\n      columnDefs = list(list(\n        className = 'dt-right', targets = '_all')),\n      dom = 'Bfrtip',\n      buttons = list('copy', 'print', \n                     list(\n        extend = 'csv',\n        exportOptions = list(\n          columns = ':visible'),\n        title = 'fracio_fed_agreg',\n        bom = TRUE),\n        I('colvis'))), \n      class = \"display\",\n      extensions = 'Buttons',{\n        indicador <- input$INDICADORES_FRAG\n        agregacao <- input$AGREGACAO_REGIONAL2\n        if(indicador == \"Desproporcionalidade de gallagher\" & \n           agregacao == \"Brasil\"){\n          data = frag_part_fed %>% \n            dplyr::filter(Cargo == input$DESCRICAO_CARGO2) %>% \n            unique() \n        }\n      })\n  })\n  \n  \n  ## Tabela para visualizacao    \n  \n  ### Deputado Estadual\n  \n  \n  depestg <- reactive({ ## Atributos da tabela\n    indicador <- input$INDICADORES_FRAG\n    agregacao <- input$AGREGACAO_REGIONAL2\n    uf <- input$UF2\n    if(indicador == \"Desproporcionalidade de gallagher\" & \n       agregacao == \"UF\"){\n      return(input$dpg_est)\n    }\n  })\n  \n  output$dpg_est <- DT::renderDataTable(server = FALSE,{ ## Tabela que devera ser chamada na ui\n    bdpg_est()\n  })\n  \n  bdpg_est <- eventReactive(input$BCALC2, { ## Botao de acao\n    datatable(options = list(\n      autoWidth = TRUE,\n      ordering = TRUE, \n      searching = TRUE,\n      lengthChange = FALSE,\n      lengthMenu = FALSE,\n      columnDefs = list(list(\n        className = 'dt-right', targets = '_all')),\n      dom = 'Bfrtip',\n      buttons = list('copy', 'print', list(\n        extend = 'csv',\n        title = 'fracio_est',\n        bom = TRUE))), \n      class = \"display\",\n      extensions = 'Buttons',{\n        indicador <- input$INDICADORES_FRAG\n        agregacao <- input$AGREGACAO_REGIONAL2\n        uf <- req(input$UF2)\n        if(indicador == \"Desproporcionalidade de gallagher\" & \n          agregacao == \"UF\"){\n          if(uf == \"\"){\n            return()\n          } else if(uf == \"Todas UFs\"){\n            frag_part_est %>% \n            dplyr::filter(Cargo == input$DESCRICAO_CARGO2) %>% \n            dplyr::select(`Ano da eleição`,\n                          UF,\n                          `Desproporcionalidade de gallagher`) %>% \n            unique() %>% \n            spread(`Ano da eleição`,\n                   `Desproporcionalidade de gallagher`)\n          \n          \n          } else{\n            frag_part_est %>% \n            dplyr::filter(UF == input$UF2 & \n                            Cargo == input$DESCRICAO_CARGO2) %>% \n            dplyr::select(`Ano da eleição`,\n                          UF,\n                          `Desproporcionalidade de gallagher`) %>% \n            unique() %>% \n            spread(`Ano da eleição`,\n                   `Desproporcionalidade de gallagher`)\n          \n          \n        }\n        }\n      })\n  })  \n  \n  ## Dados agregados\n  \n  ### Deputado Estadual  \n  \n  ag_dpgest <- reactive({\n    indicador <- input$INDICADORES_FRAG\n    agregacao <- input$AGREGACAO_REGIONAL2\n    if(indicador == \"Desproporcionalidade de gallagher\" & \n       agregacao == \"UF\"){\n      return(input$agreg_dpgest)\n    }\n  })\n  \n  output$agreg_dpgest <- DT::renderDataTable(server = FALSE,{\n    bagreg_dpgest()\n  })\n  \n  bagreg_dpgest <- eventReactive(input$BCALC2, {\n    datatable(options = list(\n      scrollX = TRUE,\n      autoWidth = TRUE,\n      ordering = TRUE, \n      searching = TRUE,\n      lengthChange = FALSE,\n      lengthMenu = FALSE,\n      columnDefs = list(list(\n        className = 'dt-right', targets = '_all')),\n      dom = 'Bfrtip',\n      buttons = list('copy', 'print', \n                     list(\n        extend = 'csv',\n        exportOptions = list(\n          columns = ':visible'),\n        title = 'fracio_est_agreg',\n        bom = TRUE),\n        I('colvis'))), \n      class = \"display\",\n      extensions = 'Buttons',{\n        indicador <- input$INDICADORES_FRAG\n        agregacao <- input$AGREGACAO_REGIONAL2\n        uf <- req(input$UF2)\n        if(indicador == \"Desproporcionalidade de gallagher\" & \n           agregacao == \"UF\"){\n          if(uf == \"\"){\n            return()\n          } else if(uf == \"Todas UFs\"){\n            data = frag_part_est %>%\n            dplyr::filter(Cargo == input$DESCRICAO_CARGO2) %>% \n            unique()\n          } else{\n            data = frag_part_est %>% \n            unique() %>% \n            dplyr::filter(UF == input$UF2 & \n                          Cargo == input$DESCRICAO_CARGO2)\n        }\n        }\n      })\n  })\n  \n  \n# 2.2.2. Fracionalizacao -------------------------------------------------- \n\n\n## Tabela para visualizacao    \n  \n### Deputado Federal\n  \n  \n  depfedf <- reactive({ ## Atributos da tabela\n    indicador <- input$INDICADORES_FRAG\n    agregacao <- input$AGREGACAO_REGIONAL2\n    if(indicador == \"Fracionalização\" & \n       cargo == \"Deputado Federal\" & \n       agregacao == \"Brasil\"){\n      return(input$fracio_fed)\n    }\n  })\n  \n  output$fracio_fed <- DT::renderDataTable(server = FALSE,{ ## Tabela que devera ser chamada na ui\n    bfracio_fed()\n  })\n  \n  bfracio_fed <- eventReactive(input$BCALC2, { ## Botao de acao\n    datatable(options = list(\n                autoWidth = TRUE,\n                ordering = TRUE, \n                searching = TRUE,\n                lengthChange = FALSE,\n                lengthMenu = FALSE,\n                columnDefs = list(list(\n                  className = 'dt-right', targets = '_all')),\n                dom = 'Bfrtip',\n                buttons = list('copy', 'print', list(\n                  extend = 'csv',\n                  title = 'fracio_fed',\n                  bom = TRUE))), \n              class = \"display\",\n              extensions = 'Buttons',{\n      indicador <- input$INDICADORES_FRAG\n      agregacao <- input$AGREGACAO_REGIONAL2\n      uf <- input$UF2\n      if(indicador == \"Fracionalização\" & \n         agregacao == \"Brasil\"){\n        frag_part_fed %>% \n          ungroup() %>% \n          dplyr::filter(Cargo == input$DESCRICAO_CARGO2) %>% \n          dplyr::select(`Ano da eleição`,\n                        `Fracionalização`) %>% \n          unique() %>% \n          spread(`Ano da eleição`,\n                 `Fracionalização`)\n        \n        \n      }\n    })\n  })  \n  \n## Dados agregados\n  \n### Deputado Federal  \n  \n  ag_fracfed <- reactive({\n    indicador <- input$INDICADORES_FRAG\n    agregacao <- input$AGREGACAO_REGIONAL2\n    if(indicador == \"Fracionalização\" & \n       agregacao == \"Brasil\"){\n      return(input$agreg_fracfed)\n    }\n  })\n  \n  output$agreg_fracfed <- DT::renderDataTable(server = FALSE,{\n    bagreg_fracfed()\n  })\n  \n  bagreg_fracfed <- eventReactive(input$BCALC2, {\n    datatable(options = list(\n                scrollX = TRUE,\n                autoWidth = TRUE,\n                ordering = TRUE, \n                searching = TRUE,\n                lengthChange = FALSE,\n                lengthMenu = FALSE,\n                columnDefs = list(list(\n                  className = 'dt-right', targets = '_all')),\n                dom = 'Bfrtip',\n                buttons = list('copy', 'print', \n                               list(\n                  extend = 'csv',\n                  exportOptions = list(\n                    columns = ':visible'),\n                  title = 'fracio_fed_agreg',\n                  bom = TRUE),\n                  I('colvis'))), \n              class = \"display\",\n              extensions = 'Buttons',{\n      indicador <- input$INDICADORES_FRAG\n      agregacao <- input$AGREGACAO_REGIONAL2\n      if(indicador == \"Fracionalização\" & \n         agregacao == \"Brasil\"){\n        data = frag_part_fed %>% \n          dplyr::filter(Cargo == input$DESCRICAO_CARGO2) %>% \n          unique() \n      }\n    })\n  })\n  \n  ## Tabela para visualizacao    \n  \n  ### Deputado Estadual\n  \n  \n  depestf <- reactive({ ## Atributos da tabela\n    indicador <- input$INDICADORES_FRAG\n    agregacao <- input$AGREGACAO_REGIONAL2\n    if(indicador == \"Fracionalização\" & \n       agregacao == \"UF\"){\n      return(input$fracio_est)\n    }\n  })\n  \n  output$fracio_est <- DT::renderDataTable(server = FALSE,{ ## Tabela que devera ser chamada na ui\n    bfracio_est()\n  })\n  \n  bfracio_est <- eventReactive(input$BCALC2, { ## Botao de acao\n    datatable(options = list(\n      autoWidth = TRUE,\n      ordering = TRUE, \n      searching = TRUE,\n      lengthChange = FALSE,\n      lengthMenu = FALSE,\n      columnDefs = list(list(\n        className = 'dt-right', targets = '_all')),\n      dom = 'Bfrtip',\n      buttons = list('copy', 'print', list(\n        extend = 'csv',\n        title = 'fracio_est',\n        bom = TRUE))), \n      class = \"display\",\n      extensions = 'Buttons',{\n        indicador <- input$INDICADORES_FRAG\n        agregacao <- input$AGREGACAO_REGIONAL2\n        uf <- req(input$UF2)\n        if(indicador == \"Fracionalização\" & \n           agregacao == \"UF\"){\n          if(uf == \"\"){\n            return()\n          } else if(uf == \"Todas UFs\"){\n            frag_part_est %>% \n            ungroup() %>% \n            dplyr::filter(Cargo == input$DESCRICAO_CARGO2) %>% \n            dplyr::select(`Ano da eleição`,\n                          UF,\n                          `Fracionalização`) %>% \n            unique() %>% \n            spread(`Ano da eleição`,\n                   `Fracionalização`)\n          } else{\n            frag_part_est %>% \n            ungroup() %>% \n            dplyr::filter(UF == input$UF2 & \n                          Cargo == input$DESCRICAO_CARGO2) %>% \n            dplyr::select(`Ano da eleição`,\n                          `Fracionalização`) %>% \n            unique() %>% \n            spread(`Ano da eleição`,\n                   `Fracionalização`)\n        \n           }\n        }\n      })\n  })  \n  \n  ## Dados agregados\n  \n  ### Deputado Estadual  \n  \n  ag_fracest <- reactive({\n    indicador <- input$INDICADORES_FRAG\n    agregacao <- input$AGREGACAO_REGIONAL2\n    if(indicador == \"Fracionalização\" & \n       agregacao == \"UF\"){\n      return(input$agreg_fracest)\n    }\n  })\n  \n  output$agreg_fracest <- DT::renderDataTable(server = FALSE,{\n    bagreg_fracest()\n  })\n  \n  bagreg_fracest <- eventReactive(input$BCALC2, {\n    datatable(options = list(\n      scrollX = TRUE,\n      autoWidth = TRUE,\n      ordering = TRUE, \n      searching = TRUE,\n      lengthChange = FALSE,\n      lengthMenu = FALSE,\n      columnDefs = list(list(\n        className = 'dt-right', targets = '_all')),\n      dom = 'Bfrtip',\n      buttons = list('copy', 'print', \n                     list(\n        extend = 'csv',\n        exportOptions = list(\n          columns = ':visible'),\n        title = 'fracio_est_agreg',\n        bom = TRUE),\n        I('colvis'))), \n      class = \"display\",\n      extensions = 'Buttons',{\n        indicador <- input$INDICADORES_FRAG\n        agregacao <- input$AGREGACAO_REGIONAL2\n        uf <- req(input$UF2)\n        if(indicador == \"Fracionalização\" & \n           agregacao == \"UF\"){\n          if(uf == \"\"){\n            return()\n          } else if(uf == \"Todas UFs\"){\n          data = frag_part_est %>% \n            dplyr::filter(Cargo == input$DESCRICAO_CARGO2) %>% \n            unique() \n          } else{\n          data = frag_part_est %>% \n            unique() %>% \n            dplyr::filter(UF == input$UF2 & \n                          Cargo == input$DESCRICAO_CARGO2)\n        }\n           }\n      })\n  })  \n  \n# 2.2.3. Fracionalizacao maxima -------------------------------------------\n  \n## Tabela para visualizacao  \n  \n### Deputado Federal\n  \n  depfedfm <- reactive({ ## Atributos da tabela\n    indicador <- input$INDICADORES_FRAG\n    agregacao <- input$AGREGACAO_REGIONAL2\n    if(indicador == \"Fracionalização máxima\" \n       & agregacao == \"Brasil\"){\n      return(input$fraciomax_fed)\n    }\n  })\n  \n  output$fraciomax_fed <- DT::renderDataTable(server = FALSE,{ ## Tabela que devera ser chamada na ui\n    bfraciomax_fed()\n  })\n  \n  bfraciomax_fed <- eventReactive(input$BCALC2, { ## Botao de acao\n    datatable(options = list(\n                autoWidth = TRUE,\n                ordering = TRUE, \n                searching = TRUE,\n                lengthChange = FALSE,\n                lengthMenu = FALSE,\n                columnDefs = list(list(\n                  className = 'dt-right', targets = '_all')),\n                dom = 'Bfrtip',\n                buttons = list('copy', 'print', list(\n                  extend = 'csv',\n                  title = 'fracio_max_fed',\n                  bom = TRUE))), \n              class = \"display\",\n              extensions = 'Buttons',{\n      indicador <- input$INDICADORES_FRAG\n      agregacao <- input$AGREGACAO_REGIONAL2\n      if(indicador == \"Fracionalização máxima\" & \n         agregacao == \"Brasil\"){\n        frag_part_fed %>% \n          ungroup() %>% \n          dplyr::filter(Cargo == input$DESCRICAO_CARGO2) %>% \n          dplyr::select(`Ano da eleição`,\n                        `Fracionalização máxima`) %>% \n          unique() %>% \n          spread(`Ano da eleição`,\n                 `Fracionalização máxima`)\n        \n      }\n    })\n  })\n  \n## Dados agregados\n  \n### Deputado Federal  \n  \n  ag_fracmaxfed <- reactive({\n    indicador <- input$INDICADORES_FRAG\n    agregacao <- input$AGREGACAO_REGIONAL2\n    if(indicador == \"Fracionalização máxima\" & \n       agregacao == \"Brasil\"){\n      return(input$agreg_fracmaxfed)\n    }\n  })\n  \n  output$agreg_fracmaxfed <- DT::renderDataTable(server = FALSE,{\n    bagreg_fracmaxfed()\n  })\n  \n  bagreg_fracmaxfed <- eventReactive(input$BCALC2, {\n    datatable(options = list(\n                scrollX = TRUE,\n                autoWidth = TRUE,\n                ordering = TRUE, \n                searching = TRUE,\n                lengthChange = FALSE,\n                lengthMenu = FALSE,\n                columnDefs = list(list(\n                  className = 'dt-right', targets = '_all')),\n                dom = 'Bfrtip',\n                buttons = list('copy', 'print', \n                               list(\n                  extend = 'csv',\n                  exportOptions = list(\n                    columns = ':visible'),\n                  title = 'fracio_max_fed_agreg',\n                  bom = TRUE),\n                  I('colvis'))), \n              class = \"display\",\n              extensions = 'Buttons',{\n      indicador <- input$INDICADORES_FRAG\n      agregacao <- input$AGREGACAO_REGIONAL2\n      if(indicador == \"Fracionalização máxima\" & \n         agregacao == \"Brasil\"){\n        data = frag_part_fed %>% \n          dplyr::filter(Cargo == input$DESCRICAO_CARGO2) %>% \n          unique() \n      }\n    })\n  })\n  \n  ## Tabela para visualizacao  \n  \n  ### Deputado Estadual\n  \n  depestfm <- reactive({ ## Atributos da tabela\n    indicador <- input$INDICADORES_FRAG\n    agregacao <- input$AGREGACAO_REGIONAL2\n    uf <- input$UF2\n    if(indicador == \"Fracionalização máxima\" \n       & agregacao == \"UF\"){\n      return(input$fraciomax_est)\n    } \n  })\n  \n  output$fraciomax_est <- DT::renderDataTable(server = FALSE,{ ## Tabela que devera ser chamada na ui\n    bfraciomax_est()\n  })\n  \n  bfraciomax_est <- eventReactive(input$BCALC2, { ## Botao de acao\n    datatable(options = list(\n      autoWidth = TRUE,\n      ordering = TRUE, \n      searching = TRUE,\n      lengthChange = FALSE,\n      lengthMenu = FALSE,\n      columnDefs = list(list(\n        className = 'dt-right', targets = '_all')),\n      dom = 'Bfrtip',\n      buttons = list('copy', 'print', list(\n        extend = 'csv',\n        title = 'fracio_max_est',\n        bom = TRUE))), \n      class = \"display\",\n      extensions = 'Buttons',{\n        indicador <- req(input$INDICADORES_FRAG)\n        agregacao <- req(input$AGREGACAO_REGIONAL2)\n        uf <- req(input$UF2)\n        if(indicador == \"Fracionalização máxima\" & \n           agregacao == \"UF\"){\n          if(uf == \"\"){\n            return()\n          } else if(uf == \"Todas UFs\"){\n            data = frag_part_est %>% \n            dplyr::filter(Cargo == input$DESCRICAO_CARGO2) %>% \n            dplyr::select(`Ano da eleição`,\n                          UF,\n                          `Fracionalização máxima`) %>% \n            unique() %>% \n            spread(`Ano da eleição`,\n                  `Fracionalização máxima`)\n          } else{\n            data = frag_part_est %>% \n            dplyr::filter(UF == input$UF2 & \n                          Cargo == input$DESCRICAO_CARGO2) %>% \n            dplyr::select(`Ano da eleição`,\n                          UF,\n                          `Fracionalização máxima`) %>% \n            unique() %>% \n            spread(`Ano da eleição`,\n                   `Fracionalização máxima`)\n        }\n        }\n      })\n  })\n  \n  ## Dados agregados\n  \n  ### Deputado Estadual \n  \n  ag_fracmaxest <- reactive({\n    indicador <- input$INDICADORES_FRAG\n    agregacao <- input$AGREGACAO_REGIONAL2\n    if(indicador == \"Fracionalização máxima\" & \n       agregacao == \"UF\"){\n      return(input$agreg_fracmaxest)\n    }\n  })\n  \n  output$agreg_fracmaxest <- DT::renderDataTable(server = FALSE,{\n    bagreg_fracmaxest()\n  })\n  \n  bagreg_fracmaxest <- eventReactive(input$BCALC2, {\n    datatable(options = list(\n      scrollX = TRUE,\n      autoWidth = TRUE,\n      ordering = TRUE, \n      searching = TRUE,\n      lengthChange = FALSE,\n      lengthMenu = FALSE,\n      columnDefs = list(list(\n        className = 'dt-right', targets = '_all')),\n      dom = 'Bfrtip',\n      buttons = list('copy', 'print', \n                     list(\n        extend = 'csv',\n        exportOptions = list(\n          columns = ':visible'),\n        title = 'fracio_max_est_agreg',\n        bom = TRUE),\n        I('colvis'))), \n      class = \"display\",\n      extensions = 'Buttons',{\n        indicador <- input$INDICADORES_FRAG\n        agregacao <- input$AGREGACAO_REGIONAL2\n        uf <- req(input$UF2)\n        if(indicador == \"Fracionalização máxima\" & \n           agregacao == \"UF\"){\n          if(uf == \"\"){\n            return()\n          }else if(uf == \"Todas UFs\"){\n            data = frag_part_est %>% \n            dplyr::filter(Cargo == input$DESCRICAO_CARGO2) %>% \n            unique()\n          } else{\n            data = frag_part_est %>% \n            unique() %>% \n            dplyr::filter(UF == input$UF2 & \n                          Cargo == input$DESCRICAO_CARGO2)\n        }\n      }\n      })\n  })  \n  \n# 2.2.4. Fragmentacao -----------------------------------------------------\n\n## Tabela para visualizacao  \n    \n### Deputado Federal\n  \n  depfed_frag <- reactive({ ## Atributos da tabela\n    indicador <- input$INDICADORES_FRAG\n    agregacao <- input$AGREGACAO_REGIONAL2\n    if(indicador == \"Fragmentação\" & \n       agregacao == \"Brasil\"){\n      return(input$frag_fed)\n    }\n  })\n  \n  output$frag_fed <- DT::renderDataTable(server = FALSE,{ ## Tabela que devera ser chamada na ui\n    bfrag_fed()\n  })\n  \n  \n  bfrag_fed <- eventReactive(input$BCALC2, { ## Botao de acao\n    datatable(options = list(\n                autoWidth = TRUE,\n                ordering = TRUE, \n                searching = TRUE,\n                lengthChange = FALSE,\n                lengthMenu = FALSE,\n                columnDefs = list(list(\n                  className = 'dt-right', targets = '_all')),\n                dom = 'Bfrtip',\n                buttons = list('copy', 'print', list(\n                  extend = 'csv',\n                  title = 'frag_fed',\n                  bom = TRUE))), \n              class = \"display\",\n              extensions = 'Buttons',{\n      indicador <- input$INDICADORES_FRAG\n      agregacao <- input$AGREGACAO_REGIONAL2\n      if(indicador == \"Fragmentação\" &\n         agregacao == \"Brasil\"){\n        frag_part_fed %>% \n          ungroup() %>% \n          dplyr::filter(Cargo == input$DESCRICAO_CARGO2) %>% \n          dplyr::select(`Ano da eleição`,\n                        `Fragmentação`) %>% \n          unique() %>% \n          spread(`Ano da eleição`,\n                 `Fragmentação`)\n        \n      }\n    })\n  })\n  \n## Dados agregados\n  \n### Deputado Federal  \n  \n  ag_fragfed <- reactive({\n    indicador <- input$INDICADORES_FRAG\n    agregacao <- input$AGREGACAO_REGIONAL2\n    if(indicador == \"Fragmentação\" & \n       agregacao == \"Brasil\"){\n      return(input$agreg_fragfed)\n    }\n  })\n  \n  output$agreg_fragfed <- DT::renderDataTable(server = FALSE,{\n    bagreg_fragfed()\n  })\n  \n  bagreg_fragfed <- eventReactive(input$BCALC2, {\n    datatable(options = list(\n                scrollX = TRUE,\n                autoWidth = TRUE,\n                ordering = TRUE, \n                searching = TRUE,\n                lengthChange = FALSE,\n                lengthMenu = FALSE,\n                columnDefs = list(list(\n                  className = 'dt-right', targets = '_all')),\n                dom = 'Bfrtip',\n                buttons = list('copy', 'print', \n                               list(\n                  extend = 'csv',\n                  exportOptions = list(\n                    columns = ':visible'),\n                  title = 'frag_fed_agreg',\n                  bom = TRUE),\n                  I('colvis'))), \n              class = \"display\",\n              extensions = 'Buttons',{\n      indicador <- input$INDICADORES_FRAG\n      agregacao <- input$AGREGACAO_REGIONAL2\n      if(indicador == \"Fragmentação\" & \n         agregacao == \"Brasil\"){\n        data = frag_part_fed %>% \n          dplyr::filter(Cargo == input$DESCRICAO_CARGO2) %>% \n          unique() \n      }\n    })\n  })  \n  \n  \n  ## Tabela para visualizacao  \n  \n  ### Deputado Estadual\n  \n  depest_frag <- reactive({ ## Atributos da tabela\n    indicador <- input$INDICADORES_FRAG\n    agregacao <- input$AGREGACAO_REGIONAL2\n    if(indicador == \"Fragmentação\" & \n       agregacao == \"UF\"){\n      return(input$frag_est)\n    }\n  })\n  \n  output$frag_est <- DT::renderDataTable(server = FALSE,{ ## Tabela que devera ser chamada na ui\n    bfrag_est()\n  })\n  \n  \n  bfrag_est <- eventReactive(input$BCALC2, { ## Botao de acao\n    datatable(options = list(\n      autoWidth = TRUE,\n      ordering = TRUE, \n      searching = TRUE,\n      lengthChange = FALSE,\n      lengthMenu = FALSE,\n      columnDefs = list(list(\n        className = 'dt-right', targets = '_all')),\n      dom = 'Bfrtip',\n      buttons = list('copy', 'print', list(\n        extend = 'csv',\n        title = 'frag_est',\n        bom = TRUE))), \n      class = \"display\",\n      extensions = 'Buttons',{\n        indicador <- input$INDICADORES_FRAG\n        agregacao <- input$AGREGACAO_REGIONAL2\n        uf <- req(input$UF2)\n        if(indicador == \"Fragmentação\" & \n           agregacao == \"UF\"){\n           if(uf == \"\"){\n             return()\n           } else if(uf == \"Todas UFs\"){\n            frag_part_est %>% \n            ungroup() %>% \n            dplyr::filter(Cargo == input$DESCRICAO_CARGO2) %>% \n            dplyr::select(`Ano da eleição`,\n                          UF,\n                          `Fragmentação`) %>% \n            unique() %>% \n            spread(`Ano da eleição`,\n                   `Fragmentação`)\n          \n          } else{\n            frag_part_est %>% \n            ungroup() %>% \n            dplyr::filter(UF == input$UF2 & \n                          Cargo == input$DESCRICAO_CARGO2) %>% \n            dplyr::select(`Ano da eleição`,\n                          UF,\n                          `Fragmentação`) %>% \n            unique() %>% \n            spread(`Ano da eleição`,\n                   `Fragmentação`)\n          }\n        }\n      })\n  })\n  \n  ## Dados agregados\n  \n  ### Deputado Estadual \n  \n  ag_fragest <- reactive({\n    indicador <- input$INDICADORES_FRAG\n    agregacao <- input$AGREGACAO_REGIONAL2\n    if(indicador == \"Fragmentação\" &\n       agregacao == \"UF\"){\n      return(input$agreg_fragest)\n    }\n  })\n  \n  output$agreg_fragest <- DT::renderDataTable(server = FALSE,{\n    bagreg_fragest()\n  })\n  \n  bagreg_fragest <- eventReactive(input$BCALC2, {\n    datatable(options = list(\n      scrollX = TRUE,\n      autoWidth = TRUE,\n      ordering = TRUE, \n      searching = TRUE,\n      lengthChange = FALSE,\n      lengthMenu = FALSE,\n      columnDefs = list(list(\n        className = 'dt-right', targets = '_all')),\n      dom = 'Bfrtip',\n      buttons = list('copy', 'print', \n                     list(\n        extend = 'csv',\n        exportOptions = list(\n          columns = ':visible'),\n        title = 'frag_est_agreg',\n        bom = TRUE),\n        I('colvis'))), \n      class = \"display\",\n      extensions = 'Buttons',{\n        indicador <- input$INDICADORES_FRAG\n        agregacao <- input$AGREGACAO_REGIONAL2\n        uf <- req(input$UF2)\n        if(indicador == \"Fragmentação\" & \n           agregacao == \"UF\"){\n          if(uf == \"\"){\n            return()\n          }else if(uf == \"Todas UFs\"){\n          data = frag_part_est %>% \n            dplyr::filter(Cargo == input$DESCRICAO_CARGO2) %>% \n            unique()\n          } else{\n          data = frag_part_est %>% \n            unique() %>% \n            dplyr::filter(UF == input$UF2 & \n                          Cargo == input$DESCRICAO_CARGO2)\n        }\n        }\n      })\n  })  \n  \n# 2.2.5. Numero efetivo de partidos por cadeiras -----------------------------------------------------\n  \n## Tabela para visualizacao  \n  \n### Deputado Federal\n  \n  depfedn <- reactive({ ## Atributos da tabela\n    indicador <- input$INDICADORES_FRAG\n    agregacao <- input$AGREGACAO_REGIONAL2\n    if(indicador == \"Número efetivo de partidos por cadeiras\" & \n       agregacao == \"Brasil\"){\n      return(input$nepc_fed)\n    }\n  })\n  \n  output$nepc_fed <- DT::renderDataTable(server = FALSE,{ ## Tabela que devera ser chamada na ui\n    bnepc_fed()\n  })\n  \n  bnepc_fed <- eventReactive(input$BCALC2, { ## Botao de acao\n    datatable(options = list(\n                autoWidth = TRUE,\n                ordering = TRUE, \n                searching = TRUE,\n                lengthChange = FALSE,\n                lengthMenu = FALSE,\n                columnDefs = list(list(\n                  className = 'dt-right', targets = '_all')),\n                dom = 'Bfrtip',\n                buttons = list('copy', 'print', list(\n                  extend = 'csv',\n                  title = 'nepc_fed',\n                  bom = TRUE))), \n              class = \"display\",\n              extensions = 'Buttons',{\n      indicador <- input$INDICADORES_FRAG\n      agregacao <- input$AGREGACAO_REGIONAL2\n      if(indicador == \"Número efetivo de partidos por cadeiras\" & \n         agregacao == \"Brasil\"){\n        frag_part_fed %>% \n          dplyr::filter(Cargo == input$DESCRICAO_CARGO2) %>% \n          dplyr::select(`Ano da eleição`,\n                        `Número efetivo de partidos por cadeiras`) %>% \n          unique() %>% \n          spread(`Ano da eleição`,\n                 `Número efetivo de partidos por cadeiras`)\n        \n      }\n    })\n  })\n  \n## Dados agregados\n  \n### Deputado Federal  \n  \n  ag_nepfed <- reactive({\n    indicador <- input$INDICADORES_FRAG\n    agregacao <- input$AGREGACAO_REGIONAL2\n    if(indicador == \"Número efetivo de partidos por cadeiras\" & \n       agregacao == \"Brasil\"){\n      return(input$agreg_nepfed)\n    }\n  })\n  \n  output$agreg_nepfed <- DT::renderDataTable(server = FALSE,{\n    bagreg_nepfed()\n  })\n  \n  bagreg_nepfed <- eventReactive(input$BCALC2, {\n    datatable(options = list(\n                scrollX = TRUE,\n                autoWidth = TRUE,\n                ordering = TRUE, \n                searching = TRUE,\n                lengthChange = FALSE,\n                lengthMenu = FALSE,\n                columnDefs = list(list(\n                  className = 'dt-right', targets = '_all')),\n                dom = 'Bfrtip',\n                buttons = list('copy', 'print', \n                               list(\n                  extend = 'csv',\n                  exportOptions = list(\n                    columns = ':visible'),\n                  title = 'nepc_fed_agreg',\n                  bom = TRUE),\n                  I('colvis'))), \n              class = \"display\",\n              extensions = 'Buttons',{\n      indicador <- input$INDICADORES_FRAG\n      agregacao <- input$AGREGACAO_REGIONAL2\n      if(indicador == \"Número efetivo de partidos por cadeiras\" & \n          agregacao == \"Brasil\"){\n        data = frag_part_fed %>% \n          dplyr::filter(Cargo == input$DESCRICAO_CARGO2) %>% \n          unique() \n      }\n    })\n  })  \n  \n## Tabela para visualizacao  \n  \n### Deputado Estadual\n  \n  depest_nep <- reactive({ ## Atributos da tabela\n    indicador <- input$INDICADORES_FRAG\n    agregacao <- input$AGREGACAO_REGIONAL2\n    if(indicador == \"Número efetivo de partidos por cadeiras\" & \n       agregacao == \"UF\"){\n      return(input$nepc_est)\n    }\n  })\n  \n  output$nepc_est <- DT::renderDataTable(server = FALSE,{ ## Tabela que devera ser chamada na ui\n    bnepc_est()\n  })   \n  \n  bnepc_est <- eventReactive(input$BCALC2, { ## Botao de acao\n    datatable(options = list(\n                autoWidth = TRUE,\n                ordering = TRUE, \n                searching = TRUE,\n                lengthChange = FALSE,\n                lengthMenu = FALSE,\n                columnDefs = list(list(\n                  className = 'dt-right', targets = '_all')),\n                dom = 'Bfrtip',\n                buttons = list('copy', 'print', list(\n                  extend = 'csv',\n                  title = 'nepc_est',\n                  bom = TRUE))), \n              class = \"display\",\n              extensions = 'Buttons',{\n      indicador <- input$INDICADORES_FRAG\n      agregacao <- input$AGREGACAO_REGIONAL2\n      uf <- req(input$UF2)\n      if(indicador == \"Número efetivo de partidos por cadeiras\" & \n         agregacao == \"UF\"){\n        if(uf == \"\"){\n          return()\n        } else if(uf == \"Todas UFs\"){\n          frag_part_est %>% \n          dplyr::filter(Cargo == input$DESCRICAO_CARGO2) %>% \n          dplyr::select(`Ano da eleição`,\n                        UF,\n                        `Número efetivo de partidos por cadeiras`) %>% \n          unique() %>% \n          spread(`Ano da eleição`,\n                 `Número efetivo de partidos por cadeiras`)\n        \n        } else{\n          frag_part_est %>% \n          dplyr::filter(UF == input$UF2 & \n                        Cargo == input$DESCRICAO_CARGO2) %>% \n          dplyr::select(`Ano da eleição`,\n                        UF,\n                        `Número efetivo de partidos por cadeiras`) %>% \n          unique() %>% \n          spread(`Ano da eleição`,\n                 `Número efetivo de partidos por cadeiras`)\n        }\n      }\n    })\n  })  \n \n## Dados agregados\n  \n### Deputado Estadual \n  \n  ag_nepest <- reactive({\n    indicador <- input$INDICADORES_FRAG\n    agregacao <- input$AGREGACAO_REGIONAL2\n    uf <- req(input$UF2)\n    if(indicador == \"Número efetivo de partidos por cadeiras\" & \n       agregacao == \"UF\"){\n      return(input$agreg_nepest)\n    }\n  })\n  \n  output$agreg_nepest <- DT::renderDataTable(server = FALSE,{\n    bagreg_nepest()\n  })\n  \n  bagreg_nepest <- eventReactive(input$BCALC2, {\n    datatable(options = list(\n                scrollX = TRUE,\n                autoWidth = TRUE,\n                ordering = TRUE, \n                searching = TRUE,\n                lengthChange = FALSE,\n                lengthMenu = FALSE,\n                columnDefs = list(list(\n                  className = 'dt-right', targets = '_all')),\n                dom = 'Bfrtip',\n                buttons = list('copy', 'print',\n                               list(\n                  extend = 'csv',\n                  exportOptions = list(\n                    columns = ':visible'),\n                  title = 'nepc_est_agreg',\n                  bom = TRUE),\n                  I('colvis'))), \n              class = \"display\",\n      extensions = 'Buttons',{\n      indicador <- input$INDICADORES_FRAG\n      agregacao <- input$AGREGACAO_REGIONAL2\n      uf <- req(input$UF2)\n      if(indicador == \"Número efetivo de partidos por cadeiras\" & \n         agregacao == \"UF\"){\n        if(uf == \"\"){\n          return()\n        } else if(uf == \"Todas UFs\"){\n          data = frag_part_est %>% \n          dplyr::filter(Cargo == input$DESCRICAO_CARGO2) %>% \n          unique()\n        } else{\n          data = frag_part_est %>% \n          dplyr::filter(UF == input$UF2 &\n                        Cargo == input$DESCRICAO_CARGO2) %>%   \n          unique() \n      }\n      }\n    })\n  })\n  \n# 2.2.6. Numero efetivo de partidos por votos -----------------------------  \n  \n  ## Tabela para visualizacao  \n  \n  ### Deputado Federal\n  \n  depfedvn <- reactive({ ## Atributos da tabela\n    indicador <- input$INDICADORES_FRAG\n    agregacao <- input$AGREGACAO_REGIONAL2\n    if(indicador == \"Número efetivo de partidos por votos\" & \n       agregacao == \"Brasil\"){\n      return(input$nepv_fed)\n    }\n  })\n  \n  output$nepv_fed <- DT::renderDataTable(server = FALSE,{ ## Tabela que devera ser chamada na ui\n    bnepv_fed()\n  })\n  \n  bnepv_fed <- eventReactive(input$BCALC2, { ## Botao de acao\n    datatable(options = list(\n      autoWidth = TRUE,\n      ordering = TRUE, \n      searching = TRUE,\n      lengthChange = FALSE,\n      lengthMenu = FALSE,\n      columnDefs = list(list(\n        className = 'dt-right', targets = '_all')),\n      dom = 'Bfrtip',\n      buttons = list('copy', 'print', list(\n        extend = 'csv',\n        title = 'nepc_fed',\n        bom = TRUE))), \n      class = \"display\",\n      extensions = 'Buttons',{\n        indicador <- input$INDICADORES_FRAG\n        agregacao <- input$AGREGACAO_REGIONAL2\n        if(indicador == \"Número efetivo de partidos por votos\" & \n           agregacao == \"Brasil\"){\n          frag_part_fed %>% \n            dplyr::filter(Cargo == input$DESCRICAO_CARGO2) %>% \n            dplyr::select(`Ano da eleição`,\n                          `Número efetivo de partidos por votos`) %>% \n            unique() %>% \n            spread(`Ano da eleição`,\n                   `Número efetivo de partidos por votos`)\n          \n        }\n      })\n  })\n  \n  ## Dados agregados\n  \n  ### Deputado Federal  \n  \n  ag_nepvfed <- reactive({\n    indicador <- input$INDICADORES_FRAG\n    agregacao <- input$AGREGACAO_REGIONAL2\n    if(indicador == \"Número efetivo de partidos por votos\" & \n       agregacao == \"Brasil\"){\n      return(input$agreg_nepvfed)\n    }\n  })\n  \n  output$agreg_nepvfed <- DT::renderDataTable(server = FALSE,{\n    bagreg_nepvfed()\n  })\n  \n  bagreg_nepvfed <- eventReactive(input$BCALC2, {\n    datatable(options = list(\n      scrollX = TRUE,\n      autoWidth = TRUE,\n      ordering = TRUE, \n      searching = TRUE,\n      lengthChange = FALSE,\n      lengthMenu = FALSE,\n      columnDefs = list(list(\n        className = 'dt-right', targets = '_all')),\n      dom = 'Bfrtip',\n      buttons = list('copy', 'print', \n                     list(\n        extend = 'csv',\n        exportOptions = list(\n          columns = ':visible'),\n        title = 'nepc_fed_agreg',\n        bom = TRUE),\n        I('colvis'))), \n      class = \"display\",\n      extensions = 'Buttons',{\n        indicador <- input$INDICADORES_FRAG\n        agregacao <- input$AGREGACAO_REGIONAL2\n        if(indicador == \"Número efetivo de partidos por votos\" & \n           agregacao == \"Brasil\"){\n          data = frag_part_fed %>% \n            dplyr::filter(Cargo == input$DESCRICAO_CARGO2) %>% \n            unique() \n        }\n      })\n  })  \n  \n  ## Tabela para visualizacao  \n  \n  ### Deputado Estadual\n  \n  depestvn <- reactive({ ## Atributos da tabela\n    indicador <- input$INDICADORES_FRAG\n    agregacao <- input$AGREGACAO_REGIONAL2\n    if(indicador == \"Número efetivo de partidos por votos\" & \n       agregacao == \"UF\"){\n      return(input$nepv_est)\n    }\n  })\n  \n  output$nepv_est <- DT::renderDataTable(server = FALSE,{ ## Tabela que devera ser chamada na ui\n    bnepv_est()\n  })\n  \n  bnepv_est <- eventReactive(input$BCALC2, { ## Botao de acao\n    datatable(options = list(\n      autoWidth = TRUE,\n      ordering = TRUE, \n      searching = TRUE,\n      lengthChange = FALSE,\n      lengthMenu = FALSE,\n      columnDefs = list(list(\n        className = 'dt-right', targets = '_all')),\n      dom = 'Bfrtip',\n      buttons = list('copy', 'print', list(\n        extend = 'csv',\n        title = 'nepc_est',\n        bom = TRUE))), \n      class = \"display\",\n      extensions = 'Buttons',{\n        indicador <- input$INDICADORES_FRAG\n        agregacao <- input$AGREGACAO_REGIONAL2\n        uf <- req(input$UF2)\n        if(indicador == \"Número efetivo de partidos por votos\" & \n           agregacao == \"UF\"){\n          if(uf == \"\"){\n            return()\n          } else if( uf == \"Todas UFs\"){\n            frag_part_est %>% \n            dplyr::filter(Cargo == input$DESCRICAO_CARGO2) %>% \n            dplyr::select(`Ano da eleição`,\n                          UF,\n                          `Número efetivo de partidos por votos`) %>% \n            unique() %>% \n            spread(`Ano da eleição`,\n                  `Número efetivo de partidos por votos`)\n          \n          } else{\n            frag_part_est %>% \n            dplyr::filter(UF == input$UF2 &\n                          Cargo == input$DESCRICAO_CARGO2) %>% \n            dplyr::select(`Ano da eleição`,\n                          UF,\n                          `Número efetivo de partidos por votos`) %>% \n            unique() %>% \n            spread(`Ano da eleição`,\n                   `Número efetivo de partidos por votos`)\n        }\n        }\n      })\n  })\n  \n  ## Dados agregados\n  \n  ### Deputado Estadual  \n  \n  ag_nepvest <- reactive({\n    indicador <- input$INDICADORES_FRAG\n    agregacao <- input$AGREGACAO_REGIONAL2\n    if(indicador == \"Número efetivo de partidos por votos\" &\n       agregacao == \"UF\"){\n      return(input$agreg_nepvest)\n    }\n  })\n  \n  output$agreg_nepvest <- DT::renderDataTable(server = FALSE,{\n    bagreg_nepvest()\n  })\n  \n  bagreg_nepvest <- eventReactive(input$BCALC2, {\n    datatable(options = list(\n      scrollX = TRUE,\n      autoWidth = TRUE,\n      ordering = TRUE, \n      searching = TRUE,\n      lengthChange = FALSE,\n      lengthMenu = FALSE,\n      columnDefs = list(list(\n        className = 'dt-right', targets = '_all')),\n      dom = 'Bfrtip',\n      buttons = list('copy', 'print', \n                     list(\n        extend = 'csv',\n        exportOptions = list(\n          columns = ':visible'),\n        title = 'nepc_est_agreg',\n        bom = TRUE),\n        I('colvis'))), \n      class = \"display\",\n      extensions = 'Buttons',{\n        indicador <- input$INDICADORES_FRAG\n        agregacao <- input$AGREGACAO_REGIONAL2\n        uf <- req(input$UF2)\n        if(indicador == \"Número efetivo de partidos por votos\" & \n           agregacao == \"UF\"){\n          if(uf == \"\"){\n            return()\n          } else if(uf == \"Todas UFs\"){\n            data = frag_part_est %>% \n            dplyr::filter(Cargo == input$DESCRICAO_CARGO2) %>% \n            unique()\n          } else{\n            data = frag_part_est %>% \n            unique() %>% \n            dplyr::filter(UF == input$UF2 &\n                          Cargo == input$DESCRICAO_CARGO2)\n        }\n        }\n      })\n  })  \n  \n  \n# 2.3. Renovacao parlamentar ----------------------------------------------  \n  \n  ## Funcao para descricao dos indicadores de renovacao parlamentar\n  \n  output$def_renovp <- renderUI({\n    note <- paste0(\"\n                   <h3 align = 'center'>\n                   <font color = 'black'>\n                   Definição dos indicadores de renovação parlamentar</h3>\n                   <h4><br /> Conservação </h4>\n                   <h5 align = 'justify'><br />\n                   Exprime a percentagem dos reeleitos em relação ao total de recandidatos.</h5>\n                   <p>\n                   <strong>Fórmula: </strong>\n                   <p>\n                   CS = (REELEIT)/(DERROT +  REELEIT) * 100\n                   <p>\n                   <h4><br /> Renovação bruta </h4>\n                   <h5 align = 'justify'><br />\n                   Esta fórmula computa o número total de representantes novos em uma legislatura,\n                   comparado à composição da legislatura anterior.</h5>\n                   <p><\n                   <strong>Fórmula: </strong>\n                   <p>\n                   RN = (DESIST + DERROT)/(TOT) * 100\n                   <h4><br /> Renovação líquida </h4>\n                   <h5 align = 'justify'><br />\n                   A 'renovação líquida' é composta pelo número de candidatos à reeleição que foram\n                   derrotados divido pelo total de recandidatos (derrotados e reeleitos).</h5>\n                   <p>\n                   <strong>Fórmula: </strong>\n                   <p>\n                   RL = (DERROT)/(REELEIT + DERROT) * 100\n                   <h4><br /> Volatilidade eleitoral </h4>\n                   <h5 align = 'justify'><br />\n                  O indicador 'volatilidade eleitoral' é uma medida agregada que resulta do\n                  somatório das perdas e ganhos dos partidos entre duas eleições, dividido por dois.\n                  As perdas e ganhos dos partidos tanto podem ser expressas em proporções de\n                  votos ou cadeiras no parlamento.</h5>\n                  <p>\n                  <strong>Fórmula: </strong>\n                  <p>\n                  VT = &sum;(Vti - Vti-1)/2\n                  <p><br /> \n                  <strong>Fonte:</strong> \n                  <p>1. Votos e partidos: almanaque de dados eleitorais: Brasil e outros \n                  países/ Organização de Wanderley Guilherme dos Santos, com a colaboração de Fabrícia Guimarães. -\n                  Rio de Janeiro: Editora FGV, 2002);  \n                  <p>2. FIGUEIREDO, M. Volatilidade eleitoral em eleições parlamentares, 1950-1978.\n                  Opinião Pública, Campinas, vol. III, nº 3, Dezembro, 1995, p.186-196.\n                  <a href= 'https://www.cesop.unicamp.br/vw/1IEjOMDM_MDA_3e2e0_/v3n3a03.pdf'></a></font>\n\n                   \")\n    HTML(note)\n  }) \n  \n# 2.3.1. Conservacao ------------------------------------------------------\n  \n  ## Tabela para visualizacao    \n  \n  ### Deputado Federal \n  \n  depfedc <- reactive({ ## Atributos das tabelas \n    indicador <- input$INDICADORES_RENOV\n    agregacao <- input$DESCRICAO_CARGO3\n    if(indicador == \"Conservação\" &\n       agregacao == \"Brasil\"){\n      return(input$conserv_fed)\n    }\n  })\n  \n  \n  output$conserv_fed <- DT::renderDataTable(server = FALSE,{ ## Tabela que devera ser chamada na ui\n    bconserv_fed()\n  })\n  \n  bconserv_fed <- eventReactive(input$BCALC3, { ## Botao de acao\n    datatable(options = list(\n      autoWidth = TRUE,\n      ordering = TRUE, \n      searching = TRUE,\n      lengthChange = FALSE,\n      lengthMenu = FALSE,\n      columnDefs = list(list(\n        className = 'dt-right', targets = '_all')),\n      dom = 'Bfrtip',\n      buttons = list('copy', 'print', list(\n        extend = 'csv',\n        title = 'renov_parl_fed',\n        bom = TRUE))), \n      class = \"display\",\n      extensions = 'Buttons',{\n        indicador <- input$INDICADORES_RENOV\n        cargo <- input$DESCRICAO_CARGO3\n        agregacao <- input$AGREGACAO_REGIONAL3\n        if(indicador == \"Conservação\" &\n           cargo == \"Deputado Federal\" &\n           agregacao == \"Brasil\"){\n          renov_parl_fed %>% \n            dplyr::filter(Cargo ==input$DESCRICAO_CARGO3) %>% \n            dplyr::select(`Ano da eleição`,\n                          `Conservação`) %>% \n            spread(`Ano da eleição`,\n                   `Conservação`)\n          \n        }\n      })\n  }) \n  \n  ## Dados agregados\n  \n  ### Deputado Federal \n  \n  ag_alifedc<- reactive({\n    indicador <- input$INDICADORES_RENOV\n    agregacao <- input$AGREGACAO_REGIONAL3\n    if(indicador == \"Conservação\" & \n       agregacao == \"Brasil\"){\n      return(input$agreg_conserv_fed)\n    }\n  })\n  \n  output$agreg_conserv_fed <- DT::renderDataTable(server = FALSE,{\n    bagreg_conserv_fed()\n  })\n  \n  bagreg_conserv_fed <- eventReactive(input$BCALC3, {\n    datatable(options = list(\n      autoWidth = TRUE,\n      ordering = TRUE, \n      searching = TRUE,\n      lengthChange = FALSE,\n      lengthMenu = FALSE,\n      columnDefs = list(list(\n        className = 'dt-right', targets = '_all')),\n      dom = 'Bfrtip',\n      buttons = list('copy', 'print', \n                     list(\n        extend = 'csv',\n        exportOptions = list(\n          columns = ':visible'),\n        title = 'renov_parl_fed_agreg',\n        bom = TRUE),\n        I('colvis'))), \n      class = \"display\",\n      extensions = 'Buttons',{\n        indicador <- input$INDICADORES_RENOV\n        cargo <- input$DESCRICAO_CARGO3\n        agregacao <- input$AGREGACAO_REGIONAL3\n        uf <- input$UF3\n        if(indicador == \"Conservação\" &\n           cargo == \"Deputado Federal\" &\n           agregacao == \"Brasil\"){\n          data = renov_parl_fed %>%\n            dplyr::filter(Cargo==input$DESCRICAO_CARGO3) \n          \n        }\n      })\n  })\n  \n  ## Tabela para visualizacao    \n  \n  ### Deputado Estadual \n  \n  depestc <- reactive({ ## Atributos das tabelas \n    indicador <- input$INDICADORES_RENOV\n    agregacao <- input$DESCRICAO_CARGO3\n    if(indicador == \"Conservação\" & \n       agregacao == \"UF\"){\n      return(input$conserv_est)\n    }\n  })\n  \n  \n  output$conserv_est <- DT::renderDataTable(server = FALSE,{ ## Tabela que devera ser chamada na ui\n    bconserv_est()\n  })\n  \n  bconserv_est <- eventReactive(input$BCALC3, { ## Botao de acao\n    datatable(options = list(\n      autoWidth = TRUE,\n      ordering = TRUE, \n      searching = TRUE,\n      lengthChange = FALSE,\n      lengthMenu = FALSE,\n      columnDefs = list(list(\n        className = 'dt-right', targets = '_all')),\n      dom = 'Bfrtip',\n      buttons = list('copy', 'print', list(\n        extend = 'csv',\n        title = 'renov_parl_est',\n        bom = TRUE))), \n      class = \"display\",\n      extensions = 'Buttons',{\n        indicador <- input$INDICADORES_RENOV\n        cargo <- input$DESCRICAO_CARGO3\n        uf <- req(input$UF3)\n        agregacao <- input$AGREGACAO_REGIONAL3\n        if(indicador == \"Conservação\" &\n           cargo == \"Deputado Estadual\")\n          if(uf == \"\"){\n            return()\n          } else if(uf == \"Todas UFs\"){\n            renov_parl_est %>% \n            dplyr::filter(Cargo == input$DESCRICAO_CARGO3) %>% \n            dplyr::select(`Ano da eleição`,\n                          UF,\n                          `Conservação`) %>% \n            spread(`Ano da eleição`,\n                  `Conservação`)\n          \n          } else{\n            renov_parl_est %>% \n              dplyr::filter(Cargo == input$DESCRICAO_CARGO3 &\n                            UF == input$UF3) %>% \n              dplyr::select(`Ano da eleição`,\n                            UF,\n                            `Conservação`) %>% \n              spread(`Ano da eleição`,\n                     `Conservação`)\n        }\n      })\n  }) \n  \n  ## Dados agregados\n  \n  ### Deputado Estadual \n  \n  ag_aliestc<- reactive({\n    indicador <- input$INDICADORES_RENOV\n    agregacao <- input$AGREGACAO_REGIONAL3\n    if(indicador == \"Conservação\" &\n       agregacao == \"UF\"){\n      return(input$agreg_conserv_est)\n    }\n  })\n  \n  output$agreg_conserv_est <- DT::renderDataTable(server = FALSE,{\n    bagreg_conserv_est()\n  })\n  \n  bagreg_conserv_est <- eventReactive(input$BCALC3, {\n    datatable(options = list(\n      autoWidth = TRUE,\n      ordering = TRUE, \n      searching = TRUE,\n      lengthChange = FALSE,\n      lengthMenu = FALSE,\n      columnDefs = list(list(\n        className = 'dt-right', targets = '_all')),\n      dom = 'Bfrtip',\n      buttons = list('copy', 'print', \n                     list(\n        extend = 'csv',\n        exportOptions = list(\n          columns = ':visible'),\n        title = 'renov_parl_est_agreg',\n        bom = TRUE),\n        I('colvis'))), \n      class = \"display\",\n      extensions = 'Buttons',{\n        indicador <- input$INDICADORES_RENOV\n        agregacao <- input$AGREGACAO_REGIONAL3\n        uf <- req(input$UF3)\n        if(indicador == \"Conservação\" & \n           agregacao == \"UF\"){\n          if(uf == \"\"){\n            return()\n          } else if(uf == \"Todas UFs\"){\n            data = renov_parl_est %>% \n            dplyr::filter(Cargo == input$DESCRICAO_CARGO3) %>% \n            unique()\n          } else{\n            data = renov_parl_est %>% \n            dplyr::filter(Cargo == input$DESCRICAO_CARGO3 &\n                     UF == input$UF3) %>% \n            unique()\n          }\n        }\n      })\n  })\n  \n# 2.3.2. Renovacao bruta --------------------------------------------------\n  \n  ## Tabela para visualizacao    \n  \n  ### Deputado Federal \n  \n  depfedrb <- reactive({ ## Atributos das tabelas \n    indicador <- input$INDICADORES_RENOV\n    agregacao <- input$DESCRICAO_CARGO3\n    if(indicador == \"Renovação bruta\" & \n       cargo == \"Deputado Federal\" &\n       agregacao == \"Brasil\"){\n      return(input$renov_br_fed)\n    }\n  })\n  \n  \n  output$renov_br_fed <- DT::renderDataTable(server = FALSE,{ ## Tabela que devera ser chamada na ui\n    brenov_br_fed()\n  })\n  \n  brenov_br_fed <- eventReactive(input$BCALC3, { ## Botao de acao\n    datatable(options = list(\n      autoWidth = TRUE,\n      ordering = TRUE, \n      searching = TRUE,\n      lengthChange = FALSE,\n      lengthMenu = FALSE,\n      columnDefs = list(list(\n        className = 'dt-right', targets = '_all')),\n      dom = 'Bfrtip',\n      buttons = list('copy', 'print', list(\n        extend = 'csv',\n        title = 'renovbr_parl_fed',\n        bom = TRUE))), \n      class = \"display\",\n      extensions = 'Buttons',{\n        indicador <- input$INDICADORES_RENOV\n        cargo <- input$DESCRICAO_CARGO3\n        agregacao <- input$AGREGACAO_REGIONAL3\n        if(indicador == \"Renovação bruta\" & \n           cargo == \"Deputado Federal\" &\n           agregacao == \"Brasil\"){\n          renov_parl_fed %>% \n            dplyr::filter(Cargo ==input$DESCRICAO_CARGO3) %>% \n            dplyr::select(`Ano da eleição`,\n                          `Renovação bruta`) %>% \n            spread(`Ano da eleição`,\n                   `Renovação bruta`) %>% \n            unique()\n          \n        }\n      })\n  }) \n  \n  ## Dados agregados\n  \n  ### Deputado Federal \n  \n  ag_alifedrb <- reactive({\n    indicador <- input$INDICADORES_RENOV\n    cargo <- input$DESCRICAO_CARGO3\n    agregacao <- input$AGREGACAO_REGIONAL3\n    if(indicador == \"Renovação bruta\" & \n       cargo == \"Deputado Federal\" &\n       agregacao == \"Brasil\"){\n      return(input$agreg_renov_br_fed)\n    }\n  })\n  \n  output$agreg_renov_br_fed <- DT::renderDataTable(server = FALSE,{\n    bagreg_renov_br_fed()\n  })\n  \n  bagreg_renov_br_fed <- eventReactive(input$BCALC3, {\n    datatable(options = list(\n      autoWidth = TRUE,\n      ordering = TRUE, \n      searching = TRUE,\n      lengthChange = FALSE,\n      lengthMenu = FALSE,\n      columnDefs = list(list(\n        className = 'dt-right', targets = '_all')),\n      dom = 'Bfrtip',\n      buttons = list('copy', 'print', \n                     list(\n        extend = 'csv',\n        exportOptions = list(\n          columns = ':visible'),\n        title = 'renov_parl_fed_agreg',\n        bom = TRUE),\n        I('colvis'))), \n      class = \"display\",\n      extensions = 'Buttons',{\n        indicador <- input$INDICADORES_RENOV\n        cargo <- input$DESCRICAO_CARGO3\n        agregacao <- input$AGREGACAO_REGIONAL3\n        uf <- input$UF3\n        if(indicador == \"Renovação bruta\" & \n           cargo == \"Deputado Federal\" &\n           agregacao == \"Brasil\"){\n            data = renov_parl_fed %>%\n            dplyr::filter(Cargo==input$DESCRICAO_CARGO3)\n        }\n      })\n  })\n  \n  ## Tabela para visualizacao    \n  \n  ### Deputado Estadual \n  \n  depestrb <- reactive({ ## Atributos das tabelas \n    indicador <- input$INDICADORES_RENOV\n    agregacao <- input$DESCRICAO_CARGO3\n    if(indicador == \"Renovação bruta\" & \n       agregacao == \"UF\"){\n      return(input$renov_br_est)\n    }\n  })\n  \n  \n  output$renov_br_est <- DT::renderDataTable(server = FALSE,{ ## Tabela que devera ser chamada na ui\n    brenov_br_est()\n  })\n  \n  brenov_br_est <- eventReactive(input$BCALC3, { ## Botao de acao\n    datatable(options = list(\n      autoWidth = TRUE,\n      ordering = TRUE, \n      searching = TRUE,\n      lengthChange = FALSE,\n      lengthMenu = FALSE,\n      columnDefs = list(list(\n        className = 'dt-right', targets = '_all')),\n      dom = 'Bfrtip',\n      buttons = list('copy', 'print', list(\n        extend = 'csv',\n        title = 'renovbr_parl_est',\n        bom = TRUE))), \n      class = \"display\",\n      extensions = 'Buttons',{\n        indicador <- input$INDICADORES_RENOV\n        agregacao <- input$AGREGACAO_REGIONAL3\n        uf <- req(input$UF3)\n        if(indicador == \"Renovação bruta\" & \n           agregacao == \"UF\"){\n          if(uf == \"\"){\n            return()\n          } else if(uf == \"Todas UFs\"){\n            renov_parl_est %>% \n            dplyr::filter(Cargo == input$DESCRICAO_CARGO3) %>% \n            dplyr::select(`Ano da eleição`,\n                          UF,\n                          `Renovação bruta`) %>% \n            spread(`Ano da eleição`,\n                   `Renovação bruta`) %>% \n            unique()\n          } else{\n            renov_parl_est %>% \n            dplyr::filter(Cargo == input$DESCRICAO_CARGO3 &\n                          UF == input$UF3) %>% \n            dplyr::select(`Ano da eleição`,\n                          UF,\n                          `Renovação bruta`) %>% \n            spread(`Ano da eleição`,\n                   `Renovação bruta`) %>% \n            unique()\n          }\n        }\n      })\n  }) \n  \n  ## Dados agregados\n  \n  ### Deputado Estadual \n  \n  ag_aliestrb <- reactive({\n    indicador <- input$INDICADORES_RENOV\n    agregacao <- input$AGREGACAO_REGIONAL3\n    if(indicador == \"Renovação bruta\" & \n       agregacao == \"UF\"){\n      return(input$agreg_renov_br_est)\n    }\n  })\n  \n  output$agreg_renov_br_est <- DT::renderDataTable(server = FALSE,{\n    bagreg_renov_br_est()\n  })\n  \n  bagreg_renov_br_est <- eventReactive(input$BCALC3, {\n    datatable(options = list(\n      autoWidth = TRUE,\n      ordering = TRUE, \n      searching = TRUE,\n      lengthChange = FALSE,\n      lengthMenu = FALSE,\n      columnDefs = list(list(\n        className = 'dt-right', targets = '_all')),\n      dom = 'Bfrtip',\n      buttons = list('copy', 'print', \n                     list(\n        extend = 'csv',\n        exportOptions = list(\n          columns = ':visible'),\n        title = 'renov_parl_est_agreg',\n        bom = TRUE),\n        I('colvis'))), \n      class = \"display\",\n      extensions = 'Buttons',{\n        indicador <- input$INDICADORES_RENOV\n        agregacao <- input$AGREGACAO_REGIONAL3\n        uf <- req(input$UF3)\n        if(indicador == \"Renovação bruta\" & \n           agregacao == \"UF\"){\n          if(uf == \"\"){\n            return()\n          } else if(uf == \"Todas UFs\"){\n            data = renov_parl_est %>%\n            dplyr::filter(Cargo==input$DESCRICAO_CARGO3)\n          } else{\n            data = renov_parl_est %>%\n            dplyr::filter(Cargo == input$DESCRICAO_CARGO3 &\n                            UF == input$UF3)\n          }\n        }\n      })\n  })\n  \n  \n# 2.3.3. Renovacao liquida ------------------------------------------------\n  \n  ## Tabela para visualizacao    \n  \n  ### Deputado Federal \n  \n  depfedrl <- reactive({ ## Atributos das tabelas \n    indicador <- input$INDICADORES_RENOV\n    cargo <- input$DESCRICAO_CARGO3\n    agregacao <- input$DESCRICAO_CARGO3\n    if(indicador == \"Renovação líquida\" &\n       cargo == \"Deputado Federal\" &\n       agregacao == \"Brasil\"){\n      return(input$renov_liq_fed)\n    }\n  })\n  \n  \n  output$renov_liq_fed <- DT::renderDataTable(server = FALSE,{ ## Tabela que devera ser chamada na ui\n    brenov_liq_fed()\n  })\n  \n  brenov_liq_fed <- eventReactive(input$BCALC3, { ## Botao de acao\n    datatable(options = list(\n      autoWidth = TRUE,\n      ordering = TRUE, \n      searching = TRUE,\n      lengthChange = FALSE,\n      lengthMenu = FALSE,\n      columnDefs = list(list(\n        className = 'dt-right', targets = '_all')),\n      dom = 'Bfrtip',\n      buttons = list('copy', 'print', list(\n        extend = 'csv',\n        title = 'renovliq_parl_fed',\n        bom = TRUE))), \n      class = \"display\",\n      extensions = 'Buttons',{\n        indicador <- input$INDICADORES_RENOV\n        cargo <- input$DESCRICAO_CARGO3\n        agregacao <- input$AGREGACAO_REGIONAL3\n        if(indicador == \"Renovação líquida\" &\n           cargo == \"Deputado Federal\" &\n           agregacao == \"Brasil\"){\n          renov_parl_fed %>% \n            dplyr::select(`Ano da eleição`,\n                          `Renovação líquida`) %>% \n            spread(`Ano da eleição`,\n                   `Renovação líquida`)\n          \n        }\n      })\n  }) \n  \n  ## Dados agregados\n  \n  ### Deputado Federal \n  \n  ag_alifedrl <- reactive({\n    indicador <- input$INDICADORES_RENOV\n    cargo <- input$DESCRICAO_CARGO3\n    agregacao <- input$AGREGACAO_REGIONAL3\n    if(indicador == \"Renovação líquida\" & \n       cargo == \"Deputado Federal\" &\n       agregacao == \"Brasil\"){\n      return(input$agreg_renov_liq_fed)\n    }\n  })\n  \n  output$agreg_renov_liq_fed <- DT::renderDataTable(server = FALSE,{\n    bagreg_renov_liq_fed()\n  })\n  \n  bagreg_renov_liq_fed <- eventReactive(input$BCALC3, {\n    datatable(options = list(\n      autoWidth = TRUE,\n      ordering = TRUE, \n      searching = TRUE,\n      lengthChange = FALSE,\n      lengthMenu = FALSE,\n      columnDefs = list(list(\n        className = 'dt-right', targets = '_all')),\n      dom = 'Bfrtip',\n      buttons = list('copy', 'print', \n                     list(\n        extend = 'csv',\n        exportOptions = list(\n          columns = ':visible'),\n        title = 'renov_parl_fed_agreg',\n        bom = TRUE),\n        I('colvis'))), \n      class = \"display\",\n      extensions = 'Buttons',{\n        indicador <- input$INDICADORES_RENOV\n        cargo <- input$DESCRICAO_CARGO3\n        agregacao <- input$AGREGACAO_REGIONAL3\n        uf <- input$UF3\n        if(indicador == \"Renovação líquida\" & \n           cargo == \"Deputado Federal\" &\n           agregacao == \"Brasil\"){\n          data = renov_parl_fed  \n          \n        }\n      })\n  })\n  \n  ## Tabela para visualizacao    \n  \n  ### Deputado Estadual \n  \n  depestrl <- reactive({ ## Atributos das tabelas \n    indicador <- input$INDICADORES_RENOV\n    agregacao <- input$DESCRICAO_CARGO3\n    if(indicador == \"Renovação líquida\" &\n       agregacao == \"UF\"){\n      return(input$renov_liq_est)\n    }\n  })\n  \n  \n  output$renov_liq_est <- DT::renderDataTable(server = FALSE,{ ## Tabela que devera ser chamada na ui\n    brenov_liq_est()\n  })\n  \n  brenov_liq_est <- eventReactive(input$BCALC3, { ## Botao de acao\n    datatable(options = list(\n      autoWidth = TRUE,\n      ordering = TRUE, \n      searching = TRUE,\n      lengthChange = FALSE,\n      lengthMenu = FALSE,\n      columnDefs = list(list(\n        className = 'dt-right', targets = '_all')),\n      dom = 'Bfrtip',\n      buttons = list('copy', 'print', list(\n        extend = 'csv',\n        title = 'renovliq_parl_est',\n        bom = TRUE))), \n      class = \"display\",\n      extensions = 'Buttons',{\n        indicador <- input$INDICADORES_RENOV\n        agregacao <- input$AGREGACAO_REGIONAL3\n        uf <- req(input$UF3)\n        if(indicador == \"Renovação líquida\" &\n           agregacao == \"UF\"){\n          if(uf == \"\"){\n            return()\n          } else if (uf == \"Todas UFs\"){\n            renov_parl_est %>% \n            dplyr::filter(Cargo == input$DESCRICAO_CARGO3) %>%\n            dplyr::select(`Ano da eleição`,\n                          UF,\n                          `Renovação líquida`) %>% \n            spread(`Ano da eleição`,\n                  `Renovação líquida`) %>% \n            unique()\n          \n          } else{\n            renov_parl_est %>% \n            dplyr::filter(Cargo == input$DESCRICAO_CARGO3 &\n                          UF == input$UF3) %>%\n            dplyr::select(`Ano da eleição`,\n                          UF,\n                          `Renovação líquida`) %>% \n            spread(`Ano da eleição`,\n                   `Renovação líquida`) %>% \n            unique()\n          }\n        }\n      })\n  }) \n  \n  ## Dados agregados\n  \n  ### Deputado Estadual \n  \n  ag_aliestrl <- reactive({\n    indicador <- input$INDICADORES_RENOV\n    agregacao <- input$AGREGACAO_REGIONAL3\n    if(indicador == \"Renovação líquida\" & \n       agregacao == \"UF\"){\n      return(input$agreg_renov_liq_est)\n    }\n  })\n  \n  output$agreg_renov_liq_est <- DT::renderDataTable(server = FALSE,{\n    bagreg_renov_liq_est()\n  })\n  \n  bagreg_renov_liq_est <- eventReactive(input$BCALC3, {\n    datatable(options = list(\n      autoWidth = TRUE,\n      ordering = TRUE, \n      searching = TRUE,\n      lengthChange = FALSE,\n      lengthMenu = FALSE,\n      columnDefs = list(list(\n        className = 'dt-right', targets = '_all')),\n      dom = 'Bfrtip',\n      buttons = list('copy', 'print', \n                     list(\n        extend = 'csv',\n        exportOptions = list(\n          columns = ':visible'),\n        title = 'renov_parl_est_agreg',\n        bom = TRUE),\n        I('colvis'))), \n      class = \"display\",\n      extensions = 'Buttons',{\n        indicador <- input$INDICADORES_RENOV\n        agregacao <- input$AGREGACAO_REGIONAL3\n        uf <- req(input$UF3)\n        if(indicador == \"Renovação líquida\" & \n           agregacao == \"UF\"){\n          if(uf == \"\"){\n            return()\n          } else if(uf == \"Todas UFs\"){\n            data = renov_parl_est %>% \n            filter(Cargo == input$DESCRICAO_CARGO3) %>% \n            unique()\n          } else{\n            data = renov_parl_est %>% \n            filter(Cargo == input$DESCRICAO_CARGO3 &\n                   UF == input$UF3) %>% \n            unique()\n          }\n        }\n      })\n  })\n  \n  \n  \n# 2.3.4. Volatilidade eleitoral -------------------------------------------\n  \n  ## Tabela para visualizacao    \n  \n  ### Deputado Federal \n  \n  depfedve <- reactive({ ## Atributos das tabelas \n    indicador <- input$INDICADORES_RENOV\n    cargo <- input$DESCRICAO_CARGO3\n    agregacao <- input$DESCRICAO_CARGO3\n    if(indicador == \"Volatilidade eleitoral\" & \n       cargo == \"Deputado Federal\" &\n       agregacao == \"Brasil\"){\n      return(input$vol_ele_fed)\n    }\n  })\n  \n  \n  output$vol_ele_fed <- DT::renderDataTable(server = FALSE,{ ## Tabela que devera ser chamada na ui\n    bvol_ele_fed()\n  })\n  \n  bvol_ele_fed <- eventReactive(input$BCALC3, { ## Botao de acao\n    datatable(options = list(\n      autoWidth = TRUE,\n      ordering = TRUE, \n      searching = TRUE,\n      lengthChange = FALSE,\n      lengthMenu = FALSE,\n      columnDefs = list(list(\n        className = 'dt-right', targets = '_all')),\n      dom = 'Bfrtip',\n      buttons = list('copy', 'print', list(\n        extend = 'csv',\n        title = 'vol_ele_fed',\n        bom = TRUE))), \n      class = \"display\",\n      extensions = 'Buttons',{\n        indicador <- input$INDICADORES_RENOV\n        cargo <- input$DESCRICAO_CARGO3\n        agregacao <- input$AGREGACAO_REGIONAL3\n        if(indicador == \"Volatilidade eleitoral\" &\n           cargo == \"Deputado Federal\" &\n           agregacao == \"Brasil\"){\n          renov_parl_fed %>% \n            dplyr::select(`Ano da eleição`,\n                          `Volatilidade eleitoral`) %>% \n            spread(`Ano da eleição`,\n                   `Volatilidade eleitoral`)\n          \n        }\n      })\n  }) \n  \n  ## Dados agregados\n  \n  ### Deputado Federal \n  \n  ag_alifedve <- reactive({\n    indicador <- input$INDICADORES_RENOV\n    cargo <- input$DESCRICAO_CARGO3\n    agregacao <- input$AGREGACAO_REGIONAL3\n    if(indicador == \"Volatilidade eleitoral\" &\n       cargo == \"Deputado Federal\" &\n       agregacao == \"Brasil\"){\n      return(input$agreg_vol_ele_fed)\n    }\n  })\n  \n  output$agreg_vol_ele_fed <- DT::renderDataTable(server = FALSE,{\n    bagreg_vol_ele_fed()\n  })\n  \n  bagreg_vol_ele_fed <- eventReactive(input$BCALC3, {\n    datatable(options = list(\n      autoWidth = TRUE,\n      ordering = TRUE, \n      searching = TRUE,\n      lengthChange = FALSE,\n      lengthMenu = FALSE,\n      columnDefs = list(list(\n        className = 'dt-right', targets = '_all')),\n      dom = 'Bfrtip',\n      buttons = list('copy', 'print', \n                     list(\n        extend = 'csv',\n        exportOptions = list(\n          columns = ':visible'),\n        title = 'vol_ele_fed_agreg',\n        bom = TRUE),\n        I('colvis'))), \n      class = \"display\",\n      extensions = 'Buttons',{\n        indicador <- input$INDICADORES_RENOV\n        cargo <- input$DESCRICAO_CARGO3\n        agregacao <- input$AGREGACAO_REGIONAL3\n        uf <- input$UF3\n        if(indicador == \"Volatilidade eleitoral\" & \n           cargo == \"Deputado Federal\" &\n           agregacao == \"Brasil\"){\n          data = renov_parl_fed \n          \n        }\n      })\n  })\n  \n  \n  ## Tabela para visualizacao    \n  \n  ### Deputado Estadual\n  \n  depestve <- reactive({ ## Atributos das tabelas \n    indicador <- input$INDICADORES_RENOV\n    agregacao <- input$DESCRICAO_CARGO3\n    if(indicador == \"Volatilidade eleitoral\" & \n       agregacao == \"UF\"){\n      return(input$vol_ele_est)\n    }\n  })\n  \n  \n  output$vol_ele_est <- DT::renderDataTable(server = FALSE,{ ## Tabela que devera ser chamada na ui\n    bvol_ele_est()\n  })\n  \n  bvol_ele_est <- eventReactive(input$BCALC3, { ## Botao de acao\n    datatable(options = list(\n      autoWidth = TRUE,\n      ordering = TRUE, \n      searching = TRUE,\n      lengthChange = FALSE,\n      lengthMenu = FALSE,\n      columnDefs = list(list(\n        className = 'dt-right', targets = '_all')),\n      dom = 'Bfrtip',\n      buttons = list('copy', 'print', list(\n        extend = 'csv',\n        title = 'vol_ele_est',\n        bom = TRUE))), \n      class = \"display\",\n      extensions = 'Buttons',{\n        indicador <- input$INDICADORES_RENOV\n        agregacao <- input$AGREGACAO_REGIONAL3\n        uf <- req(input$UF3)\n        if(indicador == \"Volatilidade eleitoral\" &\n           agregacao == \"UF\"){\n          if(uf == \"\"){\n            return()\n          } else if(uf == \"Todas UFs\"){\n            renov_parl_est %>% \n            dplyr::filter(Cargo == input$DESCRICAO_CARGO3) %>%\n            dplyr::select(`Ano da eleição`,\n                          UF,\n                          `Volatilidade eleitoral`) %>% \n            spread(`Ano da eleição`,\n                   `Volatilidade eleitoral`) %>% \n              unique()\n          } else{\n            renov_parl_est %>% \n            dplyr::filter(Cargo == input$DESCRICAO_CARGO3 &\n                          UF == input$UF3) %>%\n            dplyr::select(`Ano da eleição`,\n                          UF,\n                          `Volatilidade eleitoral`) %>% \n            spread(`Ano da eleição`,\n                   `Volatilidade eleitoral`) %>% \n            unique()\n          }\n        }\n      })\n  }) \n  \n  ## Dados agregados\n  \n  ### Deputado Estadual\n  \n  ag_aliestve <- reactive({\n    indicador <- input$INDICADORES_RENOV\n    agregacao <- input$AGREGACAO_REGIONAL3\n    if(indicador == \"Volatilidade eleitoral\" &\n       agregacao == \"UF\"){\n      return(input$agreg_vol_ele_est)\n    }\n  })\n  \n  output$agreg_vol_ele_est <- DT::renderDataTable(server = FALSE,{\n    bagreg_vol_ele_est()\n  })\n  \n  bagreg_vol_ele_est <- eventReactive(input$BCALC3, {\n    datatable(options = list(\n      autoWidth = TRUE,\n      ordering = TRUE, \n      searching = TRUE,\n      lengthChange = FALSE,\n      lengthMenu = FALSE,\n      columnDefs = list(list(\n        className = 'dt-right', targets = '_all')),\n      dom = 'Bfrtip',\n      buttons = list('copy', 'print', \n                     list(\n        extend = 'csv',\n        exportOptions = list(\n          columns = ':visible'),\n        title = 'vol_ele_est_agreg',\n        bom = TRUE),\n        I('colvis'))), \n      class = \"display\",\n      extensions = 'Buttons',{\n        indicador <- input$INDICADORES_RENOV\n        agregacao <- input$AGREGACAO_REGIONAL3\n        uf <- req(input$UF3)\n        if(indicador == \"Volatilidade eleitoral\" & \n           agregacao == \"UF\"){\n          if(uf == \"\"){\n            return()\n          } else if(uf == \"Todas UFs\"){\n            data = renov_parl_est %>% \n            filter(Cargo == input$DESCRICAO_CARGO3) %>% \n            unique()\n          } else{\n            data = renov_parl_est %>% \n            filter(Cargo == input$DESCRICAO_CARGO3 &\n                   UF == input$UF3) %>% \n            unique()\n          }\n        }\n      })\n  })\n  \n  \n  \n# 2.4. Alienacao ----------------------------------------------------------  \n  \n  ## Funcao para descricao dos indicadores de alienacao\n  \n  output$def_alien <- renderUI({\n    note <- paste0(\"\n                   <h3 align = 'center'>\n                   <font color = 'black'>\n                   Definição dos indicadores de alienação</h3>\n                   <h4><br />Alienação absoluta</h4>\n                   <h5 align = 'justify'><br />\n                   Indicadores de alienação medem a participação nas eleições, por unidade eleitoral.\n                   A 'alienação absoluta' é a soma da quantidade de abstenções, votos brancos e votos nulos\n                   de determinada eleição.</h5>\n                   <p>\n                   <strong>Fórmula: </strong>\n                   <p>\n                   AA = (Abstenções + Votos brancos + Votos nulos)\n                   <p>\n                   <h4><br />Alienação percentual</h4>\n                   <h5 align = 'justify'><br />\n                   A 'alienação percentual' é o índice de 'alienação absoluta' dividido pelo total de eleitores \n                   aptos da unidade eleitoral.</h5>\n                   <p>\n                   <strong>Fórmula: </strong>\n                   <p>\n                   AP = (Índice de alienação absoluta)/(Total de eleitores aptos)\n                   <p><br />\n                  <strong>Fonte:</strong> \n                  <p>1. Votos e partidos: almanaque de dados eleitorais: Brasil e outros \n                   países/ Organização de Wanderley Guilherme dos Santos, com a colaboração de Fabrícia Guimarães. -\n                   Rio de Janeiro: Editora FGV, 2002).</p></font>\")\n    HTML(note)\n  })\n   \n  \n \n# 2.4.1. Alienacao absoluta --------------------------------------------------------\n\n\n## Tabela para visualizacao    \n  \n### Deputado Federal BR\n  \n  depfeda_br <- reactive({ ## Atributos das tabelas \n    indicador <- input$INDICADORES_ALIE\n    cargo <- input$DESCRICAO_CARGO4\n    agregacao <- input$DESCRICAO_CARGO4\n    if(indicador == \"Alienação absoluta\" & \n       agregacao == \"Brasil\"){\n      return(input$alien_feda_br)\n  }\n  })\n  \n\n  output$alien_feda_br <- DT::renderDataTable(server = FALSE,{ ## Tabela da alienacao absoluta que devera ser chamada na ui\n    balien_feda_br()\n  })\n  \n  balien_feda_br <- eventReactive(input$BCALC4, { ## Botao de acao da alienacao absoluta\n    datatable(options = list(\n                autoWidth = TRUE,\n                ordering = TRUE, \n                searching = TRUE,\n                lengthChange = FALSE,\n                lengthMenu = FALSE,\n                columnDefs = list(list(\n                  className = 'dt-right', targets = '_all')),\n                dom = 'Bfrtip',\n                buttons = list('copy', 'print', list(\n                  extend = 'csv',\n                  title = 'alien_abs_fed_br',\n                  bom = TRUE))), \n              class = \"display\",\n              extensions = 'Buttons',{\n      indicador <- input$INDICADORES_ALIE\n      cargo <- input$DESCRICAO_CARGO4\n      agregacao <- input$AGREGACAO_REGIONAL4\n      if(indicador == \"Alienação absoluta\" & \n         agregacao == \"Brasil\"){\n        alien_br %>% \n          dplyr::filter(Cargo ==input$DESCRICAO_CARGO4) %>% \n          dplyr::select(`Ano da eleição`,\n                        Turno,\n                        `Alienação absoluta`) %>% \n          spread(`Ano da eleição`,\n                 `Alienação absoluta`)\n        \n      }\n    })\n  }) \n  \n## Dados agregados\n  \n### Deputado Federal BR  \n  \n  ag_alifeda_br <- reactive({\n    indicador <- input$INDICADORES_ALIE\n    cargo <- input$DESCRICAO_CARGO4\n    agregacao <- input$AGREGACAO_REGIONAL4\n    if(indicador == \"Alienação absoluta\" & \n       agregacao == \"Brasil\"){\n      return(input$agreg_alifeda_br)\n    }\n  })\n  \n  output$agreg_alifeda_br <- DT::renderDataTable(server = FALSE,{\n    bagreg_alifed_br()\n  })\n  \n  bagreg_alifed_br <- eventReactive(input$BCALC4, {\n    datatable(options = list(\n                autoWidth = TRUE,\n                ordering = TRUE, \n                searching = TRUE,\n                lengthChange = FALSE,\n                lengthMenu = FALSE,\n                columnDefs = list(list(\n                  className = 'dt-right', targets = '_all')),\n                dom = 'Bfrtip',\n                buttons = list('copy', 'print', \n                               list(\n                  extend = 'csv',\n                  exportOptions = list(\n                    columns = ':visible'),\n                  title = 'alien_abs_fed_br_agreg',\n                  bom = TRUE),\n                  I('colvis'))), \n              class = \"display\",\n              extensions = 'Buttons',{\n      indicador <- input$INDICADORES_ALIE\n      cargo <- input$DESCRICAO_CARGO4\n      agregacao <- input$AGREGACAO_REGIONAL4\n      uf <- input$UF4\n      if(indicador == \"Alienação absoluta\" & \n         agregacao == \"Brasil\"){\n        data = alien_br %>%\n          dplyr::filter(Cargo==input$DESCRICAO_CARGO4) \n        \n      }\n    })\n  })\n  \n## Tabela para visualizacao  \n  \n### Deputado Federal UF\n  \n  depfeda_uf <- reactive({ ## Atributos das tabelas de alienacao absoluta \n    indicador <- input$INDICADORES_ALIE\n    cargo <- input$DESCRICAO_CARGO4\n    agregacao <- input$DESCRICAO_CARGO4\n    uf <- input$UF4\n    if(indicador == \"Alienação absoluta\" & \n       agregacao == \"UF\"){\n      return(input$alien_feda_uf)\n  }    \n  })\n  \n  output$alien_feda_uf <- DT::renderDataTable(server = FALSE,{ ## Tabela da alienacao absoluta que devera ser chamada na ui\n    balien_feda_uf()\n  })\n  \n  balien_feda_uf <- eventReactive(input$BCALC4, { ## Botao de acao da alienacao absoluta\n    datatable(options = list(\n                autoWidth = TRUE,\n                ordering = TRUE, \n                searching = TRUE,\n                lengthChange = FALSE,\n                lengthMenu = FALSE,\n                columnDefs = list(list(\n                  className = 'dt-right', targets = '_all')),\n                dom = 'Bfrtip',\n                buttons = list('copy', 'print', list(\n                  extend = 'csv',\n                  title = 'alien_abs_fed_uf',\n                  bom = TRUE))), \n              class = \"display\",\n              extensions = 'Buttons',{\n      indicador <- input$INDICADORES_ALIE\n      cargo <- input$DESCRICAO_CARGO4\n      agregacao <- input$AGREGACAO_REGIONAL4\n      uf <- input$UF4\n      if(indicador == \"Alienação absoluta\" & agregacao == \"UF\"){\n        if(uf==\"Todas UFs\"){\n          alien_uf %>% \n            dplyr::filter(Cargo == input$DESCRICAO_CARGO4) %>% \n            dplyr::select(`Ano da eleição`,\n                          UF,\n                          Turno, \n                          `Alienação absoluta`) %>% \n            spread(`Ano da eleição`,\n                  `Alienação absoluta`) \n        }else{\n          alien_uf %>% \n            dplyr::filter(UF == input$UF4 & \n                          Cargo==input$DESCRICAO_CARGO4) %>% \n            dplyr::select(`Ano da eleição`,\n                          UF,\n                          Turno,\n                          `Alienação absoluta`) %>% \n            spread(`Ano da eleição`,\n                   `Alienação absoluta`)}\n        \n      }\n    })\n  })  \n  \n## Dados agregados\n  \n### Deputado Federal UF  \n  \n  ag_alifeda_uf <- reactive({\n    indicador <- input$INDICADORES_ALIE\n    cargo <- input$DESCRICAO_CARGO4\n    agregacao <- input$AGREGACAO_REGIONAL4\n    uf <- input$UF4\n    if(indicador == \"Alienação absoluta\" & \n       agregacao == \"UF\"){\n      return(input$agreg_alifeda_uf)\n    }\n  })\n  \n  output$agreg_alifeda_uf <- DT::renderDataTable(server = FALSE,{\n    bagreg_alifeda_uf()\n  })\n  \n  bagreg_alifeda_uf <- eventReactive(input$BCALC4, {\n    datatable(options = list(\n                autoWidth = TRUE,\n                ordering = TRUE, \n                searching = TRUE,\n                lengthChange = FALSE,\n                lengthMenu = FALSE,\n                columnDefs = list(list(\n                  className = 'dt-right', targets = '_all')),\n                dom = 'Bfrtip',\n                buttons = list('copy', 'print', \n                               list(\n                  extend = 'csv',\n                  exportOptions = list(\n                    columns = ':visible'),\n                  title = 'alien_abs_fed_uf_agreg',\n                  bom = TRUE),\n                  I('colvis'))), \n              class = \"display\",\n              extensions = 'Buttons',{\n      indicador <- input$INDICADORES_ALIE\n      cargo <- input$DESCRICAO_CARGO4\n      agregacao <- input$AGREGACAO_REGIONAL4\n      uf <- input$UF4\n      if(indicador == \"Alienação absoluta\" & \n         agregacao == \"UF\"){\n        if(input$UF4 == \"Todas UFs\"){\n          data = alien_uf %>% \n            dplyr::filter(Cargo==input$DESCRICAO_CARGO4)\n          } else{ \n              data = alien_uf %>% \n                dplyr::filter(Cargo==input$DESCRICAO_CARGO4 & \n                              UF == input$UF4) \n            }}\n    })\n  })  \n\n# 2.4.2. Alienacao percentual ---------------------------------------------\n\n## Tabela para visualizacao\n    \n### Deputado Federal BR\n\ndepfedp_br <- reactive({\n  indicador <- input$INDICADORES_ALIE\n  cargo <- input$DESCRICAO_CARGO4\n  agregacao <- input$DESCRICAO_CARGO4\n  if(indicador == \"Alienação percentual\" & \n     agregacao == \"Brasil\"){\n    return(input$alien_fedp_br)\n  }\n})\n\n\noutput$alien_fedp_br <- DT::renderDataTable(server = FALSE,{ ## Tabela da alienacao percentual que devera ser chamada na ui\n  balien_fedp_br()\n})\n\nbalien_fedp_br <- eventReactive(input$BCALC4, { ## Botao de acao da alienacao percentual\n  datatable(options = list(\n              autoWidth = TRUE,\n              ordering = TRUE, \n              searching = TRUE,\n              lengthChange = FALSE,\n              lengthMenu = FALSE,\n              columnDefs = list(list(\n                className = 'dt-right', targets = '_all')),\n              dom = 'Bfrtip',\n              buttons = list('copy', 'print', list(\n                extend = 'csv',\n                title = 'alien_per_fed_br',\n                bom = TRUE))), \n            class = \"display\",\n            extensions = 'Buttons',{\n    indicador <- input$INDICADORES_ALIE\n    cargo <- input$DESCRICAO_CARGO4\n    agregacao <- input$AGREGACAO_REGIONAL4\n    if(indicador == \"Alienação percentual\" & \n       agregacao == \"Brasil\"){\n      alien_br %>% \n        dplyr::filter(Cargo==input$DESCRICAO_CARGO4) %>% \n        dplyr::select(`Ano da eleição`,\n                      Turno, \n                      `Alienação percentual`) %>% \n        spread(`Ano da eleição`,\n               `Alienação percentual`)\n      \n    }\n  })\n}) \n\n## Dados agregados\n\n### Deputado Federal BR\n\nag_alifedp_br <- reactive({\n  indicador <- input$INDICADORES_ALIE\n  cargo <- input$DESCRICAO_CARGO4\n  agregacao <- input$AGREGACAO_REGIONAL4\n  if(indicador == \"Alienação percentual\" & \n     agregacao == \"Brasil\"){\n    return(input$agreg_alifedp_br)\n  }\n})\n\noutput$agreg_alifedp_br <- DT::renderDataTable(server = FALSE,{\n  bagreg_alifedp_br()\n})\n\nbagreg_alifedp_br <- eventReactive(input$BCALC4, {\n  datatable(options = list(\n              autoWidth = TRUE,\n              ordering = TRUE, \n              searching = TRUE,\n              lengthChange = FALSE,\n              lengthMenu = FALSE,\n              columnDefs = list(list(\n                className = 'dt-right', targets = '_all')),\n              dom = 'Bfrtip',\n              buttons = list('copy', 'print', \n                             list(\n                extend = 'csv',\n                exportOptions = list(\n                  columns = ':visible'),\n                title = 'alien_per_fed_br_agreg',\n                bom = TRUE),\n                I('colvis'))), \n            class = \"display\",\n            extensions = 'Buttons',{\n    indicador <- input$INDICADORES_ALIE\n    cargo <- input$DESCRICAO_CARGO4\n    agregacao <- input$AGREGACAO_REGIONAL4\n    uf <- input$UF4\n    if(indicador == \"Alienação percentual\" & \n       agregacao == \"Brasil\"){\n      alien_br %>%\n        dplyr::filter(Cargo==input$DESCRICAO_CARGO4) %>% \n        unique()\n      \n      \n    }\n  })\n})\n\n\n## Tabela para visualizacao\n\n### Deputado Federal UF\n\ndepfedp_uf <- reactive({\n  indicador <- input$INDICADORES_ALIE\n  cargo <- input$DESCRICAO_CARGO4\n  agregacao <- input$DESCRICAO_CARGO4\n  uf <- input$UF4\n  if(indicador == \"Alienação percentual\" & \n     agregacao == \"UF\"){\n    return(input$alien_fedp_uf)\n  }\n})\n\n\noutput$alien_fedp_uf <- DT::renderDataTable(server = FALSE,{ ## Tabela da alienacao percentual que devera ser chamada na ui\n  balien_fedp_uf()\n})\n\nbalien_fedp_uf <- eventReactive(input$BCALC4, { ## Botao de acao da alienacao percentual\n  datatable(options = list(\n              autoWidth = TRUE,\n              ordering = TRUE, \n              searching = TRUE,\n              lengthChange = FALSE,\n              lengthMenu = FALSE,\n              columnDefs = list(list(\n                className = 'dt-right', targets = '_all')),\n              dom = 'Bfrtip',\n              buttons = list('copy', 'print', list(\n                extend = 'csv',\n                title = 'alien_per_fed_uf',\n                bom = TRUE))), \n            class = \"display\",\n            extensions = 'Buttons',{\n    indicador <- input$INDICADORES_ALIE\n    cargo <- input$DESCRICAO_CARGO4\n    agregacao <- input$AGREGACAO_REGIONAL4\n    uf <- input$UF4\n    if(indicador == \"Alienação percentual\" & \n       agregacao == \"UF\"){\n      if(uf==\"Todas UFs\"){\n        alien_uf %>% \n          dplyr::filter(Cargo==input$DESCRICAO_CARGO4) %>% \n          dplyr::select(`Ano da eleição`,\n                        UF,\n                        Cargo,\n                        Turno,\n                        `Alienação percentual`) %>% \n          spread(`Ano da eleição`,\n                 `Alienação percentual`)\n      }\n      else{\n        alien_uf %>% \n          dplyr::filter(UF == input$UF4 & \n                        Cargo==input$DESCRICAO_CARGO4) %>% \n          dplyr::select(`Ano da eleição`,\n                        UF,\n                        Turno,\n                        `Alienação percentual`) %>% \n          spread(`Ano da eleição`,\n                 `Alienação percentual`)}\n      \n    }\n  })\n})\n\n## Dados agregados\n\n### Deputado Federal UF\n\nag_alifedp_uf <- reactive({\n  indicador <- input$INDICADORES_ALIE\n  cargo <- input$DESCRICAO_CARGO4\n  agregacao <- input$AGREGACAO_REGIONAL4\n  uf <- input$UF4\n  if(indicador == \"Alienação percentual\" & \n     agregacao == \"UF\"){\n    return(input$agreg_alifedp_uf)\n  }\n})\n\noutput$agreg_alifedp_uf <- DT::renderDataTable(server = FALSE,{\n  bagreg_alifedp_uf()\n})\n\nbagreg_alifedp_uf <- eventReactive(input$BCALC4, {\n  datatable(options = list(\n              autoWidth = TRUE,\n              ordering = TRUE, \n              searching = TRUE,\n              lengthChange = FALSE,\n              lengthMenu = FALSE,\n              columnDefs = list(list(\n                className = 'dt-right', targets = '_all')),\n              dom = 'Bfrtip',\n              buttons = list('copy', 'print', \n                             list(\n                extend = 'csv',\n                exportOptions = list(\n                  columns = ':visible'),\n                title = 'alien_per_fed_uf_agreg',\n                bom = TRUE),\n                I('colvis'))), \n            class = \"display\",\n            extensions = 'Buttons',{\n    indicador <- input$INDICADORES_ALIE\n    cargo <- input$DESCRICAO_CARGO4\n    agregacao <- input$AGREGACAO_REGIONAL4\n    uf <- input$UF4\n    if(indicador == \"Alienação percentual\" & \n       agregacao == \"UF\"){\n      if(input$UF4 == \"Todas UFs\"){\n        data =alien_uf %>% \n          dplyr::filter(Cargo==input$DESCRICAO_CARGO4) %>% \n          select(`Ano da eleição`, \n                 UF, \n                 `Alienação percentual`)\n      } else{ \n        data = alien_uf %>% \n          dplyr::filter(UF == input$UF4 &\n                        Cargo==input$DESCRICAO_CARGO4) %>% \n          unique()\n      }}\n  })\n})\n\n}\n\n\n\n\n",
    "created" : 1566400288459.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "497516306",
    "id" : "C604DBEE",
    "lastKnownWriteTime" : 1566405344,
    "last_content_update" : 1566405344554,
    "path" : "~/cepesp/cepespIndicadores/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}